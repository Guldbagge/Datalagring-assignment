2024-01-19 16:20:16 :: Repo.CreateAsync() :: Error :: An error occurred while saving the entity changes. See the inner exception for details.
2024-01-19 16:25:28 :: Repo.CreateAsync() : _userRepository :: Error :: An error occurred while saving the entity changes. See the inner exception for details.
2024-01-19 16:25:28 :: SignUpViewModel.SignUp() :: Info :: User was not created successfully.
2024-01-19 16:37:35 :: Repo.CreateAsync() : _userRepository :: Error :: The value of 'AuthEntity.UserId' is unknown when attempting to save changes. This is because the property is also part of a foreign key for which the principal entity in the relationship is not known.
2024-01-19 16:37:35 :: SignUpViewModel.SignUp() :: Info :: User was not created successfully.
2024-01-19 16:39:23 :: AuthService.SignUpAsync() :: Info :: User with hans@domain.com already exists.
2024-01-19 16:39:23 :: SignUpViewModel.SignUp() :: Info :: User was not created successfully.
2024-01-19 16:40:10 :: AuthService.SignUpAsync() :: Info :: A user was created successfully.
2024-01-19 16:40:10 :: SignUpViewModel.SignUp() :: Info :: User was not created successfully.
2024-01-19 16:43:19 :: AuthService.SignUpAsync() :: Info :: A user was created successfully.
2024-01-19 16:43:19 :: SignUpViewModel.SignUp() :: Info :: User was created successfully.
2024-01-22 10:01:07 :: AuthService.SignUpAsync() :: Info :: A user was created successfully.
2024-01-22 10:01:07 :: SignUpViewModel.SignUp() :: Info :: User was created successfully.
2024-01-22 11:53:20 :: AuthService.SignUpAsync() :: Info :: A user was created successfully.
2024-01-22 11:53:20 :: SignUpViewModel.SignUp() :: Info :: User was created successfully.
2024-01-22 16:03:48 :: GetAllUserViewModel.LoadUsersAsync() :: Info :: All users were retrieved successfully.
2024-01-23 08:09:17 :: GetAllUserViewModel.LoadUsersAsync() :: Info :: All users were retrieved successfully.
2024-01-23 08:15:28 :: GetAllUserViewModel.LoadUsersAsync() :: Info :: All users were retrieved successfully.
2024-01-23 08:23:29 :: GetAllUserViewModel.LoadUsersAsync() :: Info :: All users were retrieved successfully.
2024-01-23 08:24:41 :: GetAllUserViewModel.LoadUsersAsync() :: Info :: All users were retrieved successfully.
2024-01-23 09:20:13 :: GetAllUserViewModel.LoadUsersAsync() :: Info :: All users were retrieved successfully.
2024-01-23 10:21:29 :: GetOneUserViewModel.GetUserAsync() :: Info :: User with email zelda@domain.com was retrieved successfully.
2024-01-23 10:27:04 :: AuthService.GetUserByEmailAsync() :: Info :: User with email zelda@domain.com was retrieved successfully.
2024-01-23 10:27:04 :: GetOneUserViewModel.GetUserAsync() :: Info :: User with email zelda@domain.com was retrieved successfully.
2024-01-23 10:30:36 :: AuthService.GetUserByEmailAsync() :: Info :: User with email zelda@domain.com was retrieved successfully.
2024-01-23 10:30:36 :: GetOneUserViewModel.GetUserAsync() :: Info :: User with email zelda@domain.com was retrieved successfully.
2024-01-23 11:17:54 :: GetAllUserViewModel.LoadUsersAsync() :: Info :: All users were retrieved successfully.
2024-01-23 11:21:40 :: GetAllUserViewModel.LoadUsersAsync() :: Info :: All users were retrieved successfully.
2024-01-23 11:26:57 :: GetAllUserViewModel.LoadUsersAsync() :: Info :: All users were retrieved successfully.
2024-01-23 13:27:53 :: GetAllUserViewModel.LoadUsersAsync() :: Info :: All users were retrieved successfully.
2024-01-23 14:26:22 :: AuthService.RemoveUserAsync() :: Info :: User with email zelda@domain.com was successfully removed.
2024-01-23 14:26:22 :: DeleteUserViewModel.DeleteUserAsync() :: Info :: User with email zelda@domain.com was successfully removed.
2024-01-23 14:26:29 :: GetAllUserViewModel.LoadUsersAsync() :: Info :: All users were retrieved successfully.
2024-01-23 15:49:22 :: GetAllUserViewModel.LoadUsersAsync() :: Info :: All users were retrieved successfully.
2024-01-23 16:04:16 :: AuthService.SignUpAsync() :: Info :: A user was created successfully.
2024-01-23 16:04:16 :: SignUpViewModel.SignUp() :: Info :: User was created successfully.
2024-01-23 16:04:45 :: GetAllUserViewModel.LoadUsersAsync() :: Info :: All users were retrieved successfully.
2024-01-23 16:06:18 :: GetAllUserViewModel.LoadUsersAsync() :: Info :: All users were retrieved successfully.
2024-01-23 16:07:55 :: GetAllUserViewModel.LoadUsersAsync() :: Info :: All users were retrieved successfully.
2024-01-24 09:19:41 :: GetAllUserViewModel.LoadUsersAsync() :: Info :: All users were retrieved successfully.
2024-01-24 10:35:47 :: AuthService.UpdateUserAsync() :: Info :: User with id 0 was not found.
2024-01-24 10:35:47 :: UpdateUserViewModel.UpdateUser() :: Info :: User was not updated successfully.
2024-01-24 10:55:18 :: AuthService.UpdateUserAsync() :: Info :: User with id 0 was not found.
2024-01-24 10:55:18 :: UpdateUserViewModel.UpdateUser() :: Info :: User was not updated successfully.
2024-01-24 11:13:05 :: AuthService.UpdateUserAsync() :: Info :: User with id 0 was not found.
2024-01-24 11:13:05 :: UpdateUserViewModel.UpdateUser() :: Info :: User was not updated successfully.
2024-01-24 11:17:13 :: AuthService.UpdateUserAsync() :: Info :: User with id 0 was not found.
2024-01-24 11:17:13 :: UpdateUserViewModel.UpdateUser() :: Info :: User was not updated successfully.
2024-01-24 11:18:12 :: AuthService.UpdateUserAsync() :: Info :: User with id 0 was not found.
2024-01-24 11:18:12 :: UpdateUserViewModel.UpdateUser() :: Info :: User was not updated successfully.
2024-01-24 11:26:25 :: AuthService.UpdateUserAsync() :: Info :: User with id 0 was not found.
2024-01-24 11:26:25 :: UpdateUserViewModel.UpdateUser() :: Info :: User was not updated successfully.
2024-01-24 11:30:31 :: UpdateUserViewModel.UpdateUser() :: Info :: User ID to update: 3
2024-01-24 11:30:32 :: AuthService.UpdateUserAsync() :: Info :: User with id 0 was not found.
2024-01-24 11:30:32 :: UpdateUserViewModel.UpdateUser() :: Info :: User was not updated successfully.
2024-01-24 11:33:18 :: UpdateUserViewModel.UpdateUser() :: Info :: User ID to update: 3
2024-01-24 11:33:19 :: AuthService.UpdateUserAsync() :: Info :: User with email dsg was successfully updated.
2024-01-24 11:33:19 :: UpdateUserViewModel.UpdateUser() :: Info :: User was updated successfully.
2024-01-24 11:41:51 :: UpdateUserViewModel.UpdateUser() :: Info :: User ID to update: 3
2024-01-24 11:41:52 :: AuthService.UpdateUserAsync() :: Info :: User with email edvin@domain.com was successfully updated.
2024-01-24 11:41:52 :: UpdateUserViewModel.UpdateUser() :: Info :: User was updated successfully.
2024-01-24 11:57:05 :: GetAllUserViewModel.LoadUsersAsync() :: Info :: All users were retrieved successfully.
2024-01-24 12:05:06 :: GetOneUserViewModel.GetUserAsync() :: Warning :: Email is empty.
2024-01-24 12:05:47 :: GetOneUserViewModel.GetUserAsync() :: Warning :: Email is empty.
2024-01-24 12:36:54 :: AuthService.GetUserByEmailAsync() :: Info :: User with email edvin@domain.com was retrieved successfully.
2024-01-24 12:36:54 :: GetOneUserViewModel.GetUserAsync() :: Info :: User with email edvin@domain.com was retrieved successfully.
2024-01-24 12:38:06 :: AuthService.SignUpAsync() :: Info :: A user was created successfully.
2024-01-24 12:38:06 :: SignUpViewModel.SignUp() :: Info :: User was created successfully.
2024-01-24 12:38:41 :: AuthService.RemoveUserAsync() :: Info :: User with email elin@domain.com was successfully removed.
2024-01-24 12:38:41 :: DeleteUserViewModel.DeleteUserAsync() :: Info :: User with email elin@domain.com was successfully removed.
2024-01-24 12:39:39 :: UpdateUserViewModel.UpdateUser() :: Info :: User ID to update: 3
2024-01-24 12:39:40 :: AuthService.UpdateUserAsync() :: Info :: User with email karl@domain.com was successfully updated.
2024-01-24 12:39:40 :: UpdateUserViewModel.UpdateUser() :: Info :: User was updated successfully.
2024-01-24 12:40:06 :: GetAllUserViewModel.LoadUsersAsync() :: Info :: All users were retrieved successfully.
2024-01-24 13:55:01 :: AuthService.GetUserByEmailAsync() :: Info :: User with email edvin@domain.com was not found.
2024-01-24 13:55:01 :: GetOneUserViewModel.GetUserAsync() :: Info :: User with email edvin@domain.com was not found.
2024-01-24 13:55:08 :: AuthService.GetUserByEmailAsync() :: Info :: User with email karl@domain.com was retrieved successfully.
2024-01-24 13:55:08 :: GetOneUserViewModel.GetUserAsync() :: Info :: User with email karl@domain.com was retrieved successfully.
2024-01-24 13:55:41 :: AuthService.GetUserByEmailAsync() :: Info :: User with email karl@domain.com was retrieved successfully.
2024-01-24 13:55:41 :: GetOneUserViewModel.GetUserAsync() :: Info :: User with email karl@domain.com was retrieved successfully.
2024-01-24 13:56:18 :: AuthService.GetUserByEmailAsync() :: Info :: User with email karl@domain.com was retrieved successfully.
2024-01-24 13:56:18 :: GetOneUserViewModel.GetUserAsync() :: Info :: User with email karl@domain.com was retrieved successfully.
2024-01-24 15:22:01 :: AuthService.SignUpAsync() :: Info :: A user was created successfully.
2024-01-24 15:22:01 :: SignUpViewModel.SignUp() :: Info :: User was created successfully.
2024-01-24 15:23:09 :: UpdateUserViewModel.UpdateUser() :: Info :: User ID to update: 3
2024-01-24 15:23:10 :: AuthService.UpdateUserAsync() :: Info :: User with email 1234 was successfully updated.
2024-01-24 15:23:10 :: UpdateUserViewModel.UpdateUser() :: Info :: User was updated successfully.
2024-01-24 15:24:06 :: UpdateUserViewModel.UpdateUser() :: Info :: User ID to update: 3
2024-01-24 15:24:07 :: AuthService.UpdateUserAsync() :: Info :: User with email 12345 was successfully updated.
2024-01-24 15:24:07 :: UpdateUserViewModel.UpdateUser() :: Info :: User was updated successfully.
2024-01-24 15:24:51 :: AuthService.GetUserByEmailAsync() :: Info :: User with email 123 was retrieved successfully.
2024-01-24 15:24:51 :: GetOneUserViewModel.GetUserAsync() :: Info :: User with email 123 was retrieved successfully.
2024-01-24 15:24:57 :: GetAllUserViewModel.LoadUsersAsync() :: Info :: All users were retrieved successfully.
2024-01-24 15:25:19 :: AuthService.RemoveUserAsync() :: Info :: User with email 123 was successfully removed.
2024-01-24 15:25:19 :: DeleteUserViewModel.DeleteUserAsync() :: Info :: User with email 123 was successfully removed.
2024-01-24 15:25:43 :: AuthService.SignUpAsync() :: Info :: A user was created successfully.
2024-01-24 15:25:43 :: SignUpViewModel.SignUp() :: Info :: User was created successfully.
2024-01-24 15:26:29 :: AuthService.RemoveUserAsync() :: Info :: User with email 12345 was successfully removed.
2024-01-24 15:26:29 :: DeleteUserViewModel.DeleteUserAsync() :: Info :: User with email 12345 was successfully removed.
2024-01-24 15:26:38 :: AuthService.RemoveUserAsync() :: Info :: User with email rrr was successfully removed.
2024-01-24 15:26:38 :: DeleteUserViewModel.DeleteUserAsync() :: Info :: User with email rrr was successfully removed.
2024-01-24 15:26:42 :: GetAllUserViewModel.LoadUsersAsync() :: Info :: All users were retrieved successfully.
2024-01-24 16:13:19 :: GetAllUserViewModel.LoadUsersAsync() :: Info :: All users were retrieved successfully.
2024-01-24 16:15:59 :: GetAllUserViewModel.LoadUsersAsync() :: Info :: All users were retrieved successfully.
2024-01-24 16:23:27 :: GetAllUserViewModel.LoadUsersAsync() :: Info :: All users were retrieved successfully.
2024-01-25 17:03:38 :: Repo.DeleteAsync() :: Error :: An attempt to attach an auto-named database for file C:\Projects\EFC\Infrastructure\Data\productcatalog_database_df.mdf failed. A database with the same name exists, or specified file cannot be opened, or it is located on UNC share.
2024-01-25 17:03:38 :: Repo.GetAsync() :: Error :: An attempt to attach an auto-named database for file C:\Projects\EFC\Infrastructure\Data\productcatalog_database_df.mdf failed. A database with the same name exists, or specified file cannot be opened, or it is located on UNC share.
2024-01-25 17:03:38 :: AddProductViewModel.AddProduct() :: Info :: Product was not created successfully.
2024-01-25 17:08:57 :: AddProductViewModel.AddProduct() :: Info :: Product was not created successfully.
2024-01-26 07:53:04 :: AddProductViewModel.AddProduct() :: Info :: Product was not created successfully.
2024-01-26 08:05:31 :: AddProductViewModel.AddProduct() :: Info :: Product was not created successfully.
2024-01-26 08:14:26 :: AddProductViewModel.AddProduct() :: Info :: Product was not created successfully.
2024-01-26 08:17:29 :: AddProductViewModel.AddProduct() :: Info :: Product was not created successfully.
2024-01-26 08:32:02 :: AddProductViewModel.AddProduct() :: Info :: AddProductDto Information: ArticleNumber=2, Title=ew, Description=dsg, Price=65, CategoryName=kaffe
2024-01-26 08:32:03 :: AddProductViewModel.AddProduct() :: Info :: Product was not created successfully.
2024-01-26 08:34:29 :: AddProductViewModel.AddProduct() :: Info :: AddProductDto Information: ArticleNumber=1, Title=dg, Description=dfh, Price=214, CategoryName=Kaffe
2024-01-26 08:34:30 :: AddProductViewModel.AddProduct() :: Info :: Product was not created successfully.
2024-01-26 08:38:34 :: AddProductViewModel.AddProduct() :: Info :: AddProductDto Information: ArticleNumber=1, Title=sdg, Description=dsg, Price=120, CategoryName=Kaffe
2024-01-26 08:38:34 :: AddProductViewModel.AddProduct() :: Info :: Product was not created successfully.
2024-01-26 08:40:50 :: AddProductViewModel.AddProduct() :: Info :: AddProductDto Information: ArticleNumber=1, Title=sdg, Description=sdg, Price=214, CategoryName=Kaffe
2024-01-26 08:40:51 :: AddProductViewModel.AddProduct() :: Info :: Product was not created successfully.
2024-01-26 08:50:15 :: AddProductViewModel.AddProduct() :: Info :: AddProductDto Information: ArticleNumber=1, Title=sdg, Description=sdg, Price=12, CategoryName=Kaffe
2024-01-26 08:50:16 :: AddProductViewModel.AddProduct() :: Info :: Product was not created successfully.
2024-01-26 08:52:45 :: AddProductViewModel.AddProduct() :: Info :: AddProductDto Information: ArticleNumber=1, Title=sdg, Description=dsg, Price=23, CategoryName=Kaffe
2024-01-26 08:52:46 :: AddProductViewModel.AddProduct() :: Info :: Product was not created successfully.
2024-01-26 08:54:17 :: AddProductViewModel.AddProduct() :: Info :: AddProductDto Information: ArticleNumber=1, Title=df, Description=dsg, Price=124, CategoryName=Kaffe
2024-01-26 08:54:18 :: AddProductViewModel.AddProduct() :: Info :: Product was not created successfully.
2024-01-26 08:57:28 :: AddProductViewModel.AddProduct() :: Info :: AddProductDto Information: ArticleNumber=1, Title=ds, Description=sdg, Price=32, CategoryName=Kaffe
2024-01-26 08:57:29 :: AddProductViewModel.AddProduct() :: Info :: Product was not created successfully.
2024-01-26 09:00:03 :: AddProductViewModel.AddProduct() :: Info :: AddProductDto Information: ArticleNumber=2423, Title=sd, Description=sdg, Price=235, CategoryName=Kaffe
2024-01-26 09:00:04 :: AddProductViewModel.AddProduct() :: Info :: Product was not created successfully.
2024-01-26 09:20:58 :: ProductFactory.Create :: Info :: AddProductDto created successfully.
2024-01-26 09:20:58 :: AddProductViewModel.AddProduct() :: Info :: AddProductDto Information: ArticleNumber=123, Title=sdg, Description=sdgh, Price=12, CategoryName=kaffe
2024-01-26 09:20:59 :: ProductFactory.Create :: Info :: ProductEntity created successfully.
2024-01-26 09:20:59 :: AddProductViewModel.AddProduct() :: Info :: Product was not created successfully.
2024-01-26 09:25:21 :: ProductFactory.Create :: Info :: AddProductDto created successfully.
2024-01-26 09:25:21 :: AddProductViewModel.AddProduct() :: Info :: AddProductDto Information: ArticleNumber=12, Title=sdg, Description=dgs, Price=235, CategoryName=Kaffe
2024-01-26 09:25:22 :: ProductFactory.Create :: Info :: ProductEntity created successfully.
2024-01-26 09:25:22 :: AddProductViewModel.AddProduct() :: Info :: Product was not created successfully.
2024-01-26 09:30:19 :: ProductFactory.Create :: Info :: AddProductDto created successfully.
2024-01-26 09:30:19 :: AddProductViewModel.AddProduct() :: Info :: AddProductDto Information: ArticleNumber=235, Title=sdg, Description=sdg, Price=345, CategoryName=dsg
2024-01-26 09:30:20 :: ProductFactory.Create :: Info :: ProductEntity created successfully.
2024-01-26 09:30:20 :: ProductService.AddProductAsync() :: Info :: ProductEntity created successfully. ArticleNumber=235, Title=sdg, Description=sdg, Price=345, CategoryId=0
2024-01-26 09:30:20 :: AddProductViewModel.AddProduct() :: Info :: Product was not created successfully.
2024-01-26 10:07:14 :: ProductFactory.Create :: Info :: AddProductDto created successfully.
2024-01-26 10:07:14 :: AddProductViewModel.AddProduct() :: Info :: AddProductDto Information: ArticleNumber=123, Title=dsg, Description=dsg, Price=346, CategoryName=Kaffe
2024-01-26 10:07:14 :: ProductFactory.Create :: Info :: ProductEntity created successfully.
2024-01-26 10:07:14 :: AddProductViewModel.AddProduct() :: Info :: Product was not created successfully.
2024-01-26 10:14:34 :: ProductFactory.Create :: Info :: AddProductDto created successfully.
2024-01-26 10:14:34 :: AddProductViewModel.AddProduct() :: Info :: AddProductDto Information: ArticleNumber=123, Title=dsg, Description=sdg, Price=56, CategoryName=kaffe
2024-01-26 10:14:34 :: ProductFactory.Create :: Info :: ProductEntity created successfully.
2024-01-26 10:14:34 :: AddProductViewModel.AddProduct() :: Info :: Product was not created successfully.
2024-01-26 10:17:25 :: ProductFactory.Create :: Info :: AddProductDto created successfully.
2024-01-26 10:17:25 :: AddProductViewModel.AddProduct() :: Info :: AddProductDto Information: ArticleNumber=35, Title=fh, Description=dfh, Price=346, CategoryName=kaffe
2024-01-26 10:17:26 :: ProductFactory.Create :: Info :: ProductEntity created successfully.
2024-01-26 10:17:26 :: AddProductViewModel.AddProduct() :: Info :: Product was not created successfully.
2024-01-26 10:18:11 :: ProductFactory.Create :: Info :: AddProductDto created successfully.
2024-01-26 10:18:11 :: AddProductViewModel.AddProduct() :: Info :: AddProductDto Information: ArticleNumber=325, Title=dfg, Description=dfg, Price=436, CategoryName=Kaffe
2024-01-26 10:18:12 :: ProductFactory.Create :: Info :: ProductEntity created successfully.
2024-01-26 10:18:12 :: AddProductViewModel.AddProduct() :: Info :: Product was not created successfully.
2024-01-26 10:21:41 :: ProductFactory.Create :: Info :: AddProductDto created successfully.
2024-01-26 10:21:41 :: AddProductViewModel.AddProduct() :: Info :: AddProductDto Information: ArticleNumber=213, Title=df, Description=sd, Price=325, CategoryName=Kaffe
2024-01-26 10:21:42 :: ProductFactory.Create :: Info :: ProductEntity created successfully.
2024-01-26 10:21:42 :: AddProductViewModel.AddProduct() :: Info :: Product was not created successfully.
2024-01-26 10:45:16 :: ProductFactory.Create :: Info :: AddProductDto created successfully.
2024-01-26 10:45:17 :: AddProductViewModel.AddProduct() :: Info :: AddProductDto Information: ArticleNumber=24, Title=sd, Description=sd, Price=236, CategoryName=Kaffe
2024-01-26 10:45:18 :: ProductFactory.Create :: Info :: ProductEntity created successfully.
2024-01-26 10:45:18 :: AddProductViewModel.AddProduct() :: Info :: Product was not created successfully.
2024-01-26 11:03:16 :: ProductFactory.Create :: Info :: AddProductDto created successfully.
2024-01-26 11:03:16 :: AddProductViewModel.AddProduct() :: Info :: AddProductDto Information: ArticleNumber=32, Title=sdg, Description=sdg, Price=567, CategoryName=gfj
2024-01-26 11:03:16 :: ProductFactory.Create :: Info :: ProductEntity created successfully.
2024-01-26 11:03:16 :: AddProductViewModel.AddProduct() :: Info :: Product was not created successfully.
2024-01-26 11:14:18 :: ProductFactory.Create :: Info :: AddProductDto created successfully.
2024-01-26 11:14:18 :: AddProductViewModel.AddProduct() :: Info :: AddProductDto Information: ArticleNumber=235423, Title=sdg, Description=dsg, Price=646, CategoryName=Kaffe
2024-01-26 11:14:18 :: AddProductViewModel.AddProduct() :: Info :: Before calling AddProductAsync
2024-01-26 11:14:19 :: ProductFactory.Create :: Info :: ProductEntity created successfully.
2024-01-26 11:14:19 :: AddProductViewModel.AddProduct() :: Info :: After calling AddProductAsync, result: False
2024-01-26 11:14:19 :: AddProductViewModel.AddProduct() :: Info :: Product was not created successfully.
2024-01-26 11:21:40 :: ProductFactory.Create :: Info :: AddProductDto created successfully.
2024-01-26 11:21:40 :: AddProductViewModel.AddProduct() :: Info :: AddProductDto Information: ArticleNumber=12, Title=sdg, Description=dsg, Price=240, CategoryName=Kaffe
2024-01-26 11:21:40 :: AddProductViewModel.AddProduct() :: Info :: Before calling AddProductAsync
2024-01-26 11:21:41 :: ProductFactory.Create :: Info :: ProductEntity created successfully.
2024-01-26 11:21:41 :: ProductService.AddProductAsync() :: Error :: Default category does not exist.
2024-01-26 11:21:41 :: AddProductViewModel.AddProduct() :: Info :: After calling AddProductAsync, result: False
2024-01-26 11:21:41 :: AddProductViewModel.AddProduct() :: Info :: Product was not created successfully.
2024-01-26 11:24:30 :: ProductFactory.Create :: Info :: AddProductDto created successfully.
2024-01-26 11:24:30 :: AddProductViewModel.AddProduct() :: Info :: AddProductDto Information: ArticleNumber=24, Title=xcb, Description=xcb, Price=346, CategoryName=Kaffe
2024-01-26 11:24:30 :: AddProductViewModel.AddProduct() :: Info :: Before calling AddProductAsync
2024-01-26 11:24:31 :: ProductFactory.Create :: Info :: ProductEntity created successfully.
2024-01-26 11:24:31 :: ProductService.AddProductAsync() :: Error :: Category 'Kaffe' does not exist.
2024-01-26 11:24:31 :: AddProductViewModel.AddProduct() :: Info :: After calling AddProductAsync, result: False
2024-01-26 11:24:31 :: AddProductViewModel.AddProduct() :: Info :: Product was not created successfully.
2024-01-26 11:27:16 :: ProductFactory.Create :: Info :: AddProductDto created successfully.
2024-01-26 11:27:16 :: AddProductViewModel.AddProduct() :: Info :: AddProductDto Information: ArticleNumber=1, Title=Kaffeböner, Description=gott, Price=120, CategoryName=Kaffe
2024-01-26 11:27:16 :: AddProductViewModel.AddProduct() :: Info :: Before calling AddProductAsync
2024-01-26 11:27:17 :: ProductFactory.Create :: Info :: ProductEntity created successfully.
2024-01-26 11:27:17 :: ProductService.AddProductAsync() :: Info :: Category 'Kaffe' created.
2024-01-26 11:27:17 :: ProductService.AddProductAsync() :: Info :: CategoryId of the product entity: 1
2024-01-26 11:27:17 :: ProductService.CreateProductAsync() :: Info :: _productRepository is Infrastructure.Repositories.ProductRepository
2024-01-26 11:27:17 :: _productRepository :: Info :: Before SaveChangesAsync - ArticleNumber=1, Title=Kaffeböner, Description=gott, Price=120, CategoryId=1
2024-01-26 11:27:17 :: _productRepository :: Info :: After SaveChangesAsync - ArticleNumber=1, Title=Kaffeböner, Description=gott, Price=120, CategoryId=1
2024-01-26 11:27:17 :: ProductService.CreateProductAsync() :: Info :: A product was created successfully.
2024-01-26 11:27:17 :: AddProductViewModel.AddProduct() :: Info :: After calling AddProductAsync, result: True
2024-01-26 11:27:17 :: AddProductViewModel.AddProduct() :: Info :: Product was created successfully.
2024-01-26 11:29:48 :: ProductFactory.Create :: Info :: AddProductDto created successfully.
2024-01-26 11:29:48 :: AddProductViewModel.AddProduct() :: Info :: AddProductDto Information: ArticleNumber=2, Title=Gevalia, Description=Gott, Price=110, CategoryName=Kaffe
2024-01-26 11:29:48 :: AddProductViewModel.AddProduct() :: Info :: Before calling AddProductAsync
2024-01-26 11:29:49 :: ProductFactory.Create :: Info :: ProductEntity created successfully.
2024-01-26 11:29:50 :: ProductService.AddProductAsync() :: Info :: CategoryId of the product entity: 1
2024-01-26 11:29:50 :: ProductService.CreateProductAsync() :: Info :: _productRepository is Infrastructure.Repositories.ProductRepository
2024-01-26 11:29:50 :: _productRepository :: Info :: Before SaveChangesAsync - ArticleNumber=2, Title=Gevalia, Description=Gott, Price=110, CategoryId=1
2024-01-26 11:29:50 :: _productRepository :: Info :: After SaveChangesAsync - ArticleNumber=2, Title=Gevalia, Description=Gott, Price=110, CategoryId=1
2024-01-26 11:29:50 :: ProductService.CreateProductAsync() :: Info :: A product was created successfully.
2024-01-26 11:29:50 :: AddProductViewModel.AddProduct() :: Info :: After calling AddProductAsync, result: True
2024-01-26 11:29:50 :: AddProductViewModel.AddProduct() :: Info :: Product was created successfully.
2024-01-26 11:30:35 :: ProductFactory.Create :: Info :: AddProductDto created successfully.
2024-01-26 11:30:35 :: AddProductViewModel.AddProduct() :: Info :: AddProductDto Information: ArticleNumber=3, Title=Twinings, Description=Afternon, Price=120, CategoryName=Te
2024-01-26 11:30:35 :: AddProductViewModel.AddProduct() :: Info :: Before calling AddProductAsync
2024-01-26 11:30:35 :: ProductFactory.Create :: Info :: ProductEntity created successfully.
2024-01-26 11:30:35 :: ProductService.AddProductAsync() :: Info :: Category 'Te' created.
2024-01-26 11:30:35 :: ProductService.AddProductAsync() :: Info :: CategoryId of the product entity: 2
2024-01-26 11:30:35 :: ProductService.CreateProductAsync() :: Info :: _productRepository is Infrastructure.Repositories.ProductRepository
2024-01-26 11:30:35 :: _productRepository :: Info :: Before SaveChangesAsync - ArticleNumber=3, Title=Twinings, Description=Afternon, Price=120, CategoryId=2
2024-01-26 11:30:35 :: _productRepository :: Info :: After SaveChangesAsync - ArticleNumber=3, Title=Twinings, Description=Afternon, Price=120, CategoryId=2
2024-01-26 11:30:35 :: ProductService.CreateProductAsync() :: Info :: A product was created successfully.
2024-01-26 11:30:35 :: AddProductViewModel.AddProduct() :: Info :: After calling AddProductAsync, result: True
2024-01-26 11:30:35 :: AddProductViewModel.AddProduct() :: Info :: Product was created successfully.
2024-01-26 14:05:56 :: ProductFactory.Create :: Info :: AddProductDto created successfully.
2024-01-26 14:05:56 :: AddProductViewModel.AddProduct() :: Info :: AddProductDto Information: ArticleNumber=3, Title=Tepåsar, Description=många, Price=10, CategoryName=Te
2024-01-26 14:05:56 :: AddProductViewModel.AddProduct() :: Info :: Before calling AddProductAsync
2024-01-26 14:05:59 :: ProductService.AddProductAsync() :: Info :: Product with ArticleNumber 3 already exists.
2024-01-26 14:05:59 :: AddProductViewModel.AddProduct() :: Info :: After calling AddProductAsync, result: False
2024-01-26 14:05:59 :: AddProductViewModel.AddProduct() :: Info :: Product was not created successfully.
2024-01-26 14:07:05 :: ProductFactory.Create :: Info :: AddProductDto created successfully.
2024-01-26 14:07:05 :: AddProductViewModel.AddProduct() :: Info :: AddProductDto Information: ArticleNumber=4, Title=Tepåsar, Description=Många, Price=10, CategoryName=Te
2024-01-26 14:07:05 :: AddProductViewModel.AddProduct() :: Info :: Before calling AddProductAsync
2024-01-26 14:07:05 :: ProductFactory.Create :: Info :: ProductEntity created successfully.
2024-01-26 14:07:05 :: ProductService.AddProductAsync() :: Info :: CategoryId of the product entity: 2
2024-01-26 14:07:05 :: ProductService.CreateProductAsync() :: Info :: _productRepository is Infrastructure.Repositories.ProductRepository
2024-01-26 14:07:05 :: _productRepository :: Info :: Before SaveChangesAsync - ArticleNumber=4, Title=Tepåsar, Description=Många, Price=10, CategoryId=2
2024-01-26 14:07:05 :: _productRepository :: Info :: After SaveChangesAsync - ArticleNumber=4, Title=Tepåsar, Description=Många, Price=10, CategoryId=2
2024-01-26 14:07:05 :: ProductService.CreateProductAsync() :: Info :: A product was created successfully.
2024-01-26 14:07:05 :: AddProductViewModel.AddProduct() :: Info :: After calling AddProductAsync, result: True
2024-01-26 14:07:05 :: AddProductViewModel.AddProduct() :: Info :: Product was created successfully.
2024-01-26 14:08:33 :: AuthService.SignUpAsync() :: Info :: A user was created successfully.
2024-01-26 14:08:33 :: SignUpViewModel.SignUp() :: Info :: User was created successfully.
2024-01-29 11:12:34 :: AuthService.SignUpAsync() :: Info :: A user was created successfully.
2024-01-29 11:12:34 :: SignUpViewModel.SignUp() :: Info :: User was created successfully.
2024-01-29 11:22:24 :: AuthService.SignUpAsync() :: Info :: A user was created successfully.
2024-01-29 11:22:24 :: SignUpViewModel.SignUp() :: Info :: User was created successfully.
2024-01-29 13:46:03 :: OrderFactory.CreateOrderDto :: Info :: OrderDto created successfully.
2024-01-29 13:46:03 :: PlaceOrderViewModel.PlaceOrder() :: Info :: OrderDto Information: ArticleNumber=1, UserId=8, Quantity=3
2024-01-29 13:46:03 :: PlaceOrderViewModel.PlaceOrder() :: Info :: Before calling PlaceOrderAsync
2024-01-29 13:46:03 :: OrderFactory.CreateOrderEntity :: Info :: OrderEntity created successfully.
2024-01-29 13:46:03 :: OrderService.CreateOrderAsync() :: Info :: _orderRepository is Infrastructure.Repositories.OrderRepository
2024-01-29 13:46:04 :: OrderService.CreateOrderAsync() :: Info :: An order was placed successfully.
2024-01-29 13:46:04 :: PlaceOrderViewModel.PlaceOrder() :: Info :: After calling PlaceOrderAsync, result: True
2024-01-29 13:46:04 :: PlaceOrderViewModel.PlaceOrder() :: Info :: Order was placed successfully.
2024-01-29 14:19:01 :: OrderFactory.CreateOrderDto :: Info :: OrderDto created successfully.
2024-01-29 14:19:01 :: PlaceOrderViewModel.PlaceOrder() :: Info :: OrderDto Information: ArticleNumber=2, UserId=6, Quantity=2
2024-01-29 14:19:01 :: PlaceOrderViewModel.PlaceOrder() :: Info :: Before calling PlaceOrderAsync
2024-01-29 14:19:01 :: OrderFactory.CreateOrderEntity :: Info :: OrderEntity created successfully.
2024-01-29 14:19:01 :: OrderService.CreateOrderAsync() :: Info :: _orderRepository is Infrastructure.Repositories.OrderRepository
2024-01-29 14:19:02 :: OrderService.CreateOrderAsync() :: Info :: An order was placed successfully.
2024-01-29 14:19:02 :: PlaceOrderViewModel.PlaceOrder() :: Info :: After calling PlaceOrderAsync, result: True
2024-01-29 14:19:02 :: PlaceOrderViewModel.PlaceOrder() :: Info :: Order was placed successfully.
2024-01-29 14:40:05 :: ProductFactory.Create :: Info :: AddProductDto created successfully.
2024-01-29 14:40:05 :: AddProductViewModel.AddProduct() :: Info :: AddProductDto Information: ArticleNumber=10, Title=Päron, Description=Gröna, Price=10, CategoryName=Frukt
2024-01-29 14:40:05 :: AddProductViewModel.AddProduct() :: Info :: Before calling AddProductAsync
2024-01-29 14:40:06 :: ProductFactory.Create :: Info :: ProductEntity created successfully.
2024-01-29 14:40:06 :: ProductService.GetOrCreateCategoryAsync() :: Info :: Category 'Frukt' created.
2024-01-29 14:40:06 :: ProductService.AddProductAsync() :: Info :: CategoryId of the product entity: 3
2024-01-29 14:40:06 :: ProductService.CreateProductAsync() :: Info :: _productRepository is Infrastructure.Repositories.ProductRepository
2024-01-29 14:40:06 :: _productRepository :: Info :: Before SaveChangesAsync - ArticleNumber=10, Title=Päron, Description=Gröna, Price=10, CategoryId=3
2024-01-29 14:40:06 :: _productRepository :: Info :: After SaveChangesAsync - ArticleNumber=10, Title=Päron, Description=Gröna, Price=10, CategoryId=3
2024-01-29 14:40:06 :: ProductService.CreateProductAsync() :: Info :: A product was created successfully.
2024-01-29 14:40:06 :: AddProductViewModel.AddProduct() :: Info :: After calling AddProductAsync, result: True
2024-01-29 14:40:06 :: AddProductViewModel.AddProduct() :: Info :: Product was created successfully.
2024-01-30 10:23:51 :: GetOneProductViewModel.GetProductAsync() :: Info :: Product with article number 8 was not found.
2024-01-30 10:24:49 :: GetOneProductViewModel.GetProductAsync() :: Info :: Product with article number 2 was retrieved successfully.
2024-01-30 10:25:02 :: GetOneProductViewModel.GetProductAsync() :: Info :: Product with article number 1 was retrieved successfully.
2024-01-30 10:31:27 :: GetOneProductViewModel.GetProductAsync() :: Info :: Product with article number 1 was retrieved successfully.
2024-01-30 11:16:01 :: GetOneOrderViewModel.GetOrderAsync() :: Info :: Order with ID 1 was retrieved successfully.
2024-01-30 11:26:08 :: GetOneOrderViewModel.GetOrderAsync() :: Info :: Order with ID 1 was retrieved successfully.
2024-01-30 11:44:27 :: GetOneOrderViewModel.GetOrderAsync() :: Info :: Order with ID 2 was retrieved successfully.
2024-01-30 13:29:24 :: GetOneOrderViewModel.GetOrderAsync() :: Info :: Order with ID 1 was retrieved successfully.
2024-01-30 14:08:41 :: GetOneOrderViewModel.GetOrderAsync() :: Info :: Order with ID 1 was retrieved successfully.
2024-01-30 14:13:53 :: GetOneOrderViewModel.GetOrderAsync() :: Info :: Order with ID 1 was retrieved successfully.
2024-01-30 14:17:27 :: GetOneOrderViewModel.GetOrderAsync() :: Info :: Order with ID 1 was retrieved successfully.
2024-01-30 14:43:35 :: GetOneOrderViewModel.GetOrderAsync() :: Info :: Order with ID 1 was retrieved successfully.
2024-01-30 14:47:36 :: GetOneOrderViewModel.GetOrderAsync() :: Info :: Order with ID 1 was retrieved successfully.
2024-01-30 14:47:46 :: GetOneOrderViewModel.GetOrderAsync() :: Info :: Order with ID 1 was retrieved successfully.
2024-01-30 14:49:54 :: GetOneOrderViewModel.GetOrderAsync() :: Info :: Order with ID 1 was retrieved successfully.
2024-01-30 15:45:23 :: GetOneOrderViewModel.GetOrderAsync() :: Info :: Order with ID 1 was retrieved successfully.
2024-01-30 15:45:27 :: GetOneOrderViewModel.GetOrderAsync() :: Info :: Order with ID 1 was retrieved successfully.
2024-01-30 15:47:53 :: GetOneOrderViewModel.GetOrderAsync() :: Info :: Order with ID 1 was retrieved successfully.
2024-01-30 15:49:18 :: GetOneOrderViewModel.GetOrderAsync() :: Info :: Order with ID 2 was retrieved successfully.
2024-01-30 15:50:07 :: OrderFactory.CreateOrderDto :: Info :: OrderDto created successfully.
2024-01-30 15:50:07 :: PlaceOrderViewModel.PlaceOrder() :: Info :: OrderDto Information: ArticleNumber=1, UserId=9, Quantity=5
2024-01-30 15:50:07 :: PlaceOrderViewModel.PlaceOrder() :: Info :: Before calling PlaceOrderAsync
2024-01-30 15:50:07 :: OrderFactory.CreateOrderEntity :: Info :: OrderEntity created successfully.
2024-01-30 15:50:07 :: OrderService.CreateOrderAsync() :: Info :: _orderRepository is Infrastructure.Repositories.OrderRepository
2024-01-30 15:50:07 :: Repo.CreateAsync() : _orderRepository :: Error :: An error occurred while saving the entity changes. See the inner exception for details.
2024-01-30 15:50:07 :: OrderService.CreateOrderAsync() :: Error :: OrderEntity is null after creation.
2024-01-30 15:50:07 :: PlaceOrderViewModel.PlaceOrder() :: Info :: After calling PlaceOrderAsync, result: False
2024-01-30 15:50:07 :: PlaceOrderViewModel.PlaceOrder() :: Info :: Order was not placed successfully.
2024-01-30 15:50:22 :: OrderFactory.CreateOrderDto :: Info :: OrderDto created successfully.
2024-01-30 15:50:22 :: PlaceOrderViewModel.PlaceOrder() :: Info :: OrderDto Information: ArticleNumber=1, UserId=8, Quantity=4
2024-01-30 15:50:22 :: PlaceOrderViewModel.PlaceOrder() :: Info :: Before calling PlaceOrderAsync
2024-01-30 15:50:22 :: OrderFactory.CreateOrderEntity :: Info :: OrderEntity created successfully.
2024-01-30 15:50:22 :: OrderService.CreateOrderAsync() :: Info :: _orderRepository is Infrastructure.Repositories.OrderRepository
2024-01-30 15:50:23 :: Repo.CreateAsync() : _orderRepository :: Error :: An error occurred while saving the entity changes. See the inner exception for details.
2024-01-30 15:50:23 :: OrderService.CreateOrderAsync() :: Error :: OrderEntity is null after creation.
2024-01-30 15:50:23 :: PlaceOrderViewModel.PlaceOrder() :: Info :: After calling PlaceOrderAsync, result: False
2024-01-30 15:50:23 :: PlaceOrderViewModel.PlaceOrder() :: Info :: Order was not placed successfully.
2024-01-30 15:52:18 :: OrderFactory.CreateOrderDto :: Info :: OrderDto created successfully.
2024-01-30 15:52:18 :: PlaceOrderViewModel.PlaceOrder() :: Info :: OrderDto Information: ArticleNumber=1, UserId=4, Quantity=3
2024-01-30 15:52:18 :: PlaceOrderViewModel.PlaceOrder() :: Info :: Before calling PlaceOrderAsync
2024-01-30 15:52:18 :: OrderFactory.CreateOrderEntity :: Info :: OrderEntity created successfully.
2024-01-30 15:52:18 :: OrderService.CreateOrderAsync() :: Info :: _orderRepository is Infrastructure.Repositories.OrderRepository
2024-01-30 15:52:18 :: Repo.CreateAsync() : _orderRepository :: Error :: An error occurred while saving the entity changes. See the inner exception for details.
2024-01-30 15:52:18 :: OrderService.CreateOrderAsync() :: Error :: OrderEntity is null after creation.
2024-01-30 15:52:18 :: PlaceOrderViewModel.PlaceOrder() :: Info :: After calling PlaceOrderAsync, result: False
2024-01-30 15:52:18 :: PlaceOrderViewModel.PlaceOrder() :: Info :: Order was not placed successfully.
2024-01-30 15:55:20 :: ProductFactory.Create :: Info :: AddProductDto created successfully.
2024-01-30 15:55:20 :: AddProductViewModel.AddProduct() :: Info :: AddProductDto Information: ArticleNumber=11, Title=Äpple, Description=Rött, Price=10, CategoryName=Frukt
2024-01-30 15:55:20 :: AddProductViewModel.AddProduct() :: Info :: Before calling AddProductAsync
2024-01-30 15:55:21 :: ProductFactory.Create :: Info :: ProductEntity created successfully.
2024-01-30 15:55:21 :: ProductService.AddProductAsync() :: Info :: CategoryId of the product entity: 3
2024-01-30 15:55:21 :: ProductService.CreateProductAsync() :: Info :: _productRepository is Infrastructure.Repositories.ProductRepository
2024-01-30 15:55:21 :: _productRepository :: Info :: Before SaveChangesAsync - ArticleNumber=11, Title=Äpple, Description=Rött, Price=10, CategoryId=3
2024-01-30 15:55:21 :: _productRepository :: Info :: After SaveChangesAsync - ArticleNumber=11, Title=Äpple, Description=Rött, Price=10, CategoryId=3
2024-01-30 15:55:21 :: ProductService.CreateProductAsync() :: Info :: A product was created successfully.
2024-01-30 15:55:21 :: AddProductViewModel.AddProduct() :: Info :: After calling AddProductAsync, result: True
2024-01-30 15:55:21 :: AddProductViewModel.AddProduct() :: Info :: Product was created successfully.
2024-01-30 15:59:44 :: GetOneOrderViewModel.GetOrderAsync() :: Info :: Order with ID 1 was retrieved successfully.
2024-01-30 16:00:05 :: OrderFactory.CreateOrderDto :: Info :: OrderDto created successfully.
2024-01-30 16:00:05 :: PlaceOrderViewModel.PlaceOrder() :: Info :: OrderDto Information: ArticleNumber=11, UserId=4, Quantity=5
2024-01-30 16:00:05 :: PlaceOrderViewModel.PlaceOrder() :: Info :: Before calling PlaceOrderAsync
2024-01-30 16:00:05 :: OrderFactory.CreateOrderEntity :: Info :: OrderEntity created successfully.
2024-01-30 16:00:05 :: OrderService.CreateOrderAsync() :: Info :: _orderRepository is Infrastructure.Repositories.OrderRepository
2024-01-30 16:00:05 :: OrderService.CreateOrderAsync() :: Info :: An order was placed successfully.
2024-01-30 16:00:05 :: PlaceOrderViewModel.PlaceOrder() :: Info :: After calling PlaceOrderAsync, result: True
2024-01-30 16:00:05 :: PlaceOrderViewModel.PlaceOrder() :: Info :: Order was placed successfully.
2024-01-31 08:32:01 :: AuthService.SignUpAsync() :: Info :: A user was created successfully.
2024-01-31 08:32:01 :: SignUpViewModel.SignUp() :: Info :: User was created successfully.
2024-01-31 08:43:19 :: AuthService.GetUserByEmailAsync() :: Info :: User with email magnus@domain.com was retrieved successfully.
2024-01-31 08:43:19 :: GetOneUserViewModel.GetUserAsync() :: Info :: User with email magnus@domain.com was retrieved successfully.
2024-01-31 08:50:33 :: AuthService.RemoveUserAsync() :: Info :: User with email magnus@domain.com was successfully removed.
2024-01-31 08:50:33 :: DeleteUserViewModel.DeleteUserAsync() :: Info :: User with email magnus@domain.com was successfully removed.
2024-01-31 08:51:23 :: ProductFactory.Create :: Info :: AddProductDto created successfully.
2024-01-31 08:51:23 :: AddProductViewModel.AddProduct() :: Info :: AddProductDto Information: ArticleNumber=1, Title=Dator, Description=bra, Price=100, CategoryName=Elektronik
2024-01-31 08:51:23 :: AddProductViewModel.AddProduct() :: Info :: Before calling AddProductAsync
2024-01-31 08:51:24 :: ProductService.AddProductAsync() :: Info :: Product with ArticleNumber 1 already exists.
2024-01-31 08:51:24 :: AddProductViewModel.AddProduct() :: Info :: After calling AddProductAsync, result: False
2024-01-31 08:51:24 :: AddProductViewModel.AddProduct() :: Info :: Product was not created successfully.
2024-01-31 08:51:58 :: ProductFactory.Create :: Info :: AddProductDto created successfully.
2024-01-31 08:51:58 :: AddProductViewModel.AddProduct() :: Info :: AddProductDto Information: ArticleNumber=14, Title=Dator, Description=Bra, Price=10000, CategoryName=Elektronik
2024-01-31 08:51:58 :: AddProductViewModel.AddProduct() :: Info :: Before calling AddProductAsync
2024-01-31 08:51:58 :: ProductFactory.Create :: Info :: ProductEntity created successfully.
2024-01-31 08:51:58 :: ProductService.GetOrCreateCategoryAsync() :: Info :: Category 'Elektronik' created.
2024-01-31 08:51:58 :: ProductService.AddProductAsync() :: Info :: CategoryId of the product entity: 4
2024-01-31 08:51:58 :: ProductService.CreateProductAsync() :: Info :: _productRepository is Infrastructure.Repositories.ProductRepository
2024-01-31 08:51:58 :: _productRepository :: Info :: Before SaveChangesAsync - ArticleNumber=14, Title=Dator, Description=Bra, Price=10000, CategoryId=4
2024-01-31 08:51:58 :: _productRepository :: Info :: After SaveChangesAsync - ArticleNumber=14, Title=Dator, Description=Bra, Price=10000, CategoryId=4
2024-01-31 08:51:58 :: ProductService.CreateProductAsync() :: Info :: A product was created successfully.
2024-01-31 08:51:58 :: AddProductViewModel.AddProduct() :: Info :: After calling AddProductAsync, result: True
2024-01-31 08:51:58 :: AddProductViewModel.AddProduct() :: Info :: Product was created successfully.
2024-01-31 08:52:10 :: GetOneProductViewModel.GetProductAsync() :: Info :: Product with article number 14 was retrieved successfully.
2024-01-31 08:52:37 :: OrderFactory.CreateOrderDto :: Info :: OrderDto created successfully.
2024-01-31 08:52:37 :: PlaceOrderViewModel.PlaceOrder() :: Info :: OrderDto Information: ArticleNumber=14, UserId=4, Quantity=5
2024-01-31 08:52:37 :: PlaceOrderViewModel.PlaceOrder() :: Info :: Before calling PlaceOrderAsync
2024-01-31 08:52:37 :: OrderFactory.CreateOrderEntity :: Info :: OrderEntity created successfully.
2024-01-31 08:52:37 :: OrderService.CreateOrderAsync() :: Info :: _orderRepository is Infrastructure.Repositories.OrderRepository
2024-01-31 08:52:37 :: OrderService.CreateOrderAsync() :: Info :: An order was placed successfully.
2024-01-31 08:52:37 :: PlaceOrderViewModel.PlaceOrder() :: Info :: After calling PlaceOrderAsync, result: True
2024-01-31 08:52:37 :: PlaceOrderViewModel.PlaceOrder() :: Info :: Order was placed successfully.
2024-01-31 08:52:54 :: GetOneOrderViewModel.GetOrderAsync() :: Info :: Order with ID 14 was not found.
2024-01-31 08:54:21 :: GetOneOrderViewModel.GetOrderAsync() :: Info :: Order with ID 7 was retrieved successfully.
2024-01-31 10:56:48 :: AuthService.SignUpAsync() :: Info :: A user was created successfully.
2024-01-31 10:56:48 :: SignUpViewModel.SignUp() :: Info :: User was created successfully.
2024-01-31 10:57:36 :: AuthService.GetUserByEmailAsync() :: Info :: User with email magnus@domain.com was retrieved successfully.
2024-01-31 10:57:36 :: GetOneUserViewModel.GetUserAsync() :: Info :: User with email magnus@domain.com was retrieved successfully.
2024-01-31 10:59:05 :: UpdateUserViewModel.UpdateUser() :: Info :: User ID to update: 16
2024-01-31 10:59:06 :: Repo.UpdateAsync() :: Error :: An error occurred while saving the entity changes. See the inner exception for details.
2024-01-31 10:59:06 :: AuthService.UpdateUserAsync() :: Error :: Failed to update user with email .
2024-01-31 10:59:06 :: UpdateUserViewModel.UpdateUser() :: Info :: User was not updated successfully.
2024-01-31 10:59:37 :: UpdateUserViewModel.UpdateUser() :: Info :: User ID to update: 16
2024-01-31 10:59:37 :: AuthService.UpdateUserAsync() :: Info :: User with email magnus@domain.com was successfully updated.
2024-01-31 10:59:37 :: UpdateUserViewModel.UpdateUser() :: Info :: User was updated successfully.
2024-01-31 11:00:02 :: AuthService.RemoveUserAsync() :: Info :: User with email magnus@domain.com was successfully removed.
2024-01-31 11:00:02 :: DeleteUserViewModel.DeleteUserAsync() :: Info :: User with email magnus@domain.com was successfully removed.
2024-01-31 11:00:37 :: ProductFactory.Create :: Info :: AddProductDto created successfully.
2024-01-31 11:00:37 :: AddProductViewModel.AddProduct() :: Info :: AddProductDto Information: ArticleNumber=15, Title=Iphon, Description=bra att ha, Price=10000, CategoryName=Elektronik
2024-01-31 11:00:37 :: AddProductViewModel.AddProduct() :: Info :: Before calling AddProductAsync
2024-01-31 11:00:37 :: ProductFactory.Create :: Info :: ProductEntity created successfully.
2024-01-31 11:00:37 :: ProductService.AddProductAsync() :: Info :: CategoryId of the product entity: 4
2024-01-31 11:00:37 :: ProductService.CreateProductAsync() :: Info :: _productRepository is Infrastructure.Repositories.ProductRepository
2024-01-31 11:00:37 :: _productRepository :: Info :: Before SaveChangesAsync - ArticleNumber=15, Title=Iphon, Description=bra att ha, Price=10000, CategoryId=4
2024-01-31 11:00:37 :: _productRepository :: Info :: After SaveChangesAsync - ArticleNumber=15, Title=Iphon, Description=bra att ha, Price=10000, CategoryId=4
2024-01-31 11:00:37 :: ProductService.CreateProductAsync() :: Info :: A product was created successfully.
2024-01-31 11:00:37 :: AddProductViewModel.AddProduct() :: Info :: After calling AddProductAsync, result: True
2024-01-31 11:00:37 :: AddProductViewModel.AddProduct() :: Info :: Product was created successfully.
2024-01-31 11:00:48 :: GetOneProductViewModel.GetProductAsync() :: Info :: Product with article number 15 was retrieved successfully.
2024-01-31 11:01:17 :: OrderFactory.CreateOrderDto :: Info :: OrderDto created successfully.
2024-01-31 11:01:18 :: PlaceOrderViewModel.PlaceOrder() :: Info :: OrderDto Information: ArticleNumber=15, UserId=8, Quantity=3
2024-01-31 11:01:18 :: PlaceOrderViewModel.PlaceOrder() :: Info :: Before calling PlaceOrderAsync
2024-01-31 11:01:18 :: OrderFactory.CreateOrderEntity :: Info :: OrderEntity created successfully.
2024-01-31 11:01:18 :: OrderService.CreateOrderAsync() :: Info :: _orderRepository is Infrastructure.Repositories.OrderRepository
2024-01-31 11:01:18 :: OrderService.CreateOrderAsync() :: Info :: An order was placed successfully.
2024-01-31 11:01:18 :: PlaceOrderViewModel.PlaceOrder() :: Info :: After calling PlaceOrderAsync, result: True
2024-01-31 11:01:18 :: PlaceOrderViewModel.PlaceOrder() :: Info :: Order was placed successfully.
2024-01-31 11:01:55 :: GetOneOrderViewModel.GetOrderAsync() :: Info :: Order with ID 8 was retrieved successfully.
2024-02-01 08:14:59 :: Repo.CreateAsync() :  :: Error :: Services for database providers 'Microsoft.EntityFrameworkCore.InMemory', 'Microsoft.EntityFrameworkCore.SqlServer' have been registered in the service provider. Only a single database provider can be registered in a service provider. If possible, ensure that Entity Framework is managing its service provider by removing the call to 'UseInternalServiceProvider'. Otherwise, consider conditionally registering the database provider, or maintaining one service provider per database provider.
2024-02-01 08:17:59 :: Repo.CreateAsync() :  :: Error :: Services for database providers 'Microsoft.EntityFrameworkCore.InMemory', 'Microsoft.EntityFrameworkCore.SqlServer' have been registered in the service provider. Only a single database provider can be registered in a service provider. If possible, ensure that Entity Framework is managing its service provider by removing the call to 'UseInternalServiceProvider'. Otherwise, consider conditionally registering the database provider, or maintaining one service provider per database provider.
2024-02-01 08:18:21 :: Repo.CreateAsync() :  :: Error :: Services for database providers 'Microsoft.EntityFrameworkCore.InMemory', 'Microsoft.EntityFrameworkCore.SqlServer' have been registered in the service provider. Only a single database provider can be registered in a service provider. If possible, ensure that Entity Framework is managing its service provider by removing the call to 'UseInternalServiceProvider'. Otherwise, consider conditionally registering the database provider, or maintaining one service provider per database provider.
2024-02-01 08:19:00 :: Repo.CreateAsync() :  :: Error :: Services for database providers 'Microsoft.EntityFrameworkCore.InMemory', 'Microsoft.EntityFrameworkCore.SqlServer' have been registered in the service provider. Only a single database provider can be registered in a service provider. If possible, ensure that Entity Framework is managing its service provider by removing the call to 'UseInternalServiceProvider'. Otherwise, consider conditionally registering the database provider, or maintaining one service provider per database provider.
2024-02-01 08:26:33 :: Repo.CreateAsync() :  :: Error :: Services for database providers 'Microsoft.EntityFrameworkCore.InMemory', 'Microsoft.EntityFrameworkCore.SqlServer' have been registered in the service provider. Only a single database provider can be registered in a service provider. If possible, ensure that Entity Framework is managing its service provider by removing the call to 'UseInternalServiceProvider'. Otherwise, consider conditionally registering the database provider, or maintaining one service provider per database provider.
2024-02-01 08:42:59 :: Repo.CreateAsync() :  :: Error :: Services for database providers 'Microsoft.EntityFrameworkCore.InMemory', 'Microsoft.EntityFrameworkCore.SqlServer' have been registered in the service provider. Only a single database provider can be registered in a service provider. If possible, ensure that Entity Framework is managing its service provider by removing the call to 'UseInternalServiceProvider'. Otherwise, consider conditionally registering the database provider, or maintaining one service provider per database provider.
2024-02-01 08:46:02 :: Repo.CreateAsync() :  :: Error :: Services for database providers 'Microsoft.EntityFrameworkCore.InMemory', 'Microsoft.EntityFrameworkCore.SqlServer' have been registered in the service provider. Only a single database provider can be registered in a service provider. If possible, ensure that Entity Framework is managing its service provider by removing the call to 'UseInternalServiceProvider'. Otherwise, consider conditionally registering the database provider, or maintaining one service provider per database provider.
2024-02-01 08:49:41 :: Repo.CreateAsync() :  :: Error :: Services for database providers 'Microsoft.EntityFrameworkCore.InMemory', 'Microsoft.EntityFrameworkCore.SqlServer' have been registered in the service provider. Only a single database provider can be registered in a service provider. If possible, ensure that Entity Framework is managing its service provider by removing the call to 'UseInternalServiceProvider'. Otherwise, consider conditionally registering the database provider, or maintaining one service provider per database provider.
2024-02-01 08:57:20 :: Repo.CreateAsync() :  :: Error :: Services for database providers 'Microsoft.EntityFrameworkCore.InMemory', 'Microsoft.EntityFrameworkCore.SqlServer' have been registered in the service provider. Only a single database provider can be registered in a service provider. If possible, ensure that Entity Framework is managing its service provider by removing the call to 'UseInternalServiceProvider'. Otherwise, consider conditionally registering the database provider, or maintaining one service provider per database provider.
2024-02-01 08:58:51 :: Repo.CreateAsync() :  :: Error :: Services for database providers 'Microsoft.EntityFrameworkCore.InMemory', 'Microsoft.EntityFrameworkCore.SqlServer' have been registered in the service provider. Only a single database provider can be registered in a service provider. If possible, ensure that Entity Framework is managing its service provider by removing the call to 'UseInternalServiceProvider'. Otherwise, consider conditionally registering the database provider, or maintaining one service provider per database provider.
2024-02-01 08:59:56 :: Repo.CreateAsync() :  :: Error :: Services for database providers 'Microsoft.EntityFrameworkCore.InMemory', 'Microsoft.EntityFrameworkCore.SqlServer' have been registered in the service provider. Only a single database provider can be registered in a service provider. If possible, ensure that Entity Framework is managing its service provider by removing the call to 'UseInternalServiceProvider'. Otherwise, consider conditionally registering the database provider, or maintaining one service provider per database provider.
2024-02-01 09:00:47 :: Repo.CreateAsync() :  :: Error :: Services for database providers 'Microsoft.EntityFrameworkCore.InMemory', 'Microsoft.EntityFrameworkCore.SqlServer' have been registered in the service provider. Only a single database provider can be registered in a service provider. If possible, ensure that Entity Framework is managing its service provider by removing the call to 'UseInternalServiceProvider'. Otherwise, consider conditionally registering the database provider, or maintaining one service provider per database provider.
2024-02-01 09:01:23 :: Repo.CreateAsync() :  :: Error :: Services for database providers 'Microsoft.EntityFrameworkCore.InMemory', 'Microsoft.EntityFrameworkCore.SqlServer' have been registered in the service provider. Only a single database provider can be registered in a service provider. If possible, ensure that Entity Framework is managing its service provider by removing the call to 'UseInternalServiceProvider'. Otherwise, consider conditionally registering the database provider, or maintaining one service provider per database provider.
2024-02-01 09:03:25 :: Repo.CreateAsync() :  :: Error :: Services for database providers 'Microsoft.EntityFrameworkCore.InMemory', 'Microsoft.EntityFrameworkCore.SqlServer' have been registered in the service provider. Only a single database provider can be registered in a service provider. If possible, ensure that Entity Framework is managing its service provider by removing the call to 'UseInternalServiceProvider'. Otherwise, consider conditionally registering the database provider, or maintaining one service provider per database provider.
2024-02-01 09:04:49 :: Repo.CreateAsync() :  :: Error :: Services for database providers 'Microsoft.EntityFrameworkCore.InMemory', 'Microsoft.EntityFrameworkCore.SqlServer' have been registered in the service provider. Only a single database provider can be registered in a service provider. If possible, ensure that Entity Framework is managing its service provider by removing the call to 'UseInternalServiceProvider'. Otherwise, consider conditionally registering the database provider, or maintaining one service provider per database provider.
2024-02-01 09:06:02 :: Repo.CreateAsync() :  :: Error :: Services for database providers 'Microsoft.EntityFrameworkCore.InMemory', 'Microsoft.EntityFrameworkCore.SqlServer' have been registered in the service provider. Only a single database provider can be registered in a service provider. If possible, ensure that Entity Framework is managing its service provider by removing the call to 'UseInternalServiceProvider'. Otherwise, consider conditionally registering the database provider, or maintaining one service provider per database provider.
2024-02-01 09:09:07 :: Repo.CreateAsync() :  :: Error :: Services for database providers 'Microsoft.EntityFrameworkCore.InMemory', 'Microsoft.EntityFrameworkCore.SqlServer' have been registered in the service provider. Only a single database provider can be registered in a service provider. If possible, ensure that Entity Framework is managing its service provider by removing the call to 'UseInternalServiceProvider'. Otherwise, consider conditionally registering the database provider, or maintaining one service provider per database provider.
2024-02-01 09:15:25 :: Repo.CreateAsync() :  :: Error :: Services for database providers 'Microsoft.EntityFrameworkCore.InMemory', 'Microsoft.EntityFrameworkCore.SqlServer' have been registered in the service provider. Only a single database provider can be registered in a service provider. If possible, ensure that Entity Framework is managing its service provider by removing the call to 'UseInternalServiceProvider'. Otherwise, consider conditionally registering the database provider, or maintaining one service provider per database provider.
2024-02-01 09:17:13 :: Repo.CreateAsync() :  :: Error :: Services for database providers 'Microsoft.EntityFrameworkCore.InMemory', 'Microsoft.EntityFrameworkCore.SqlServer' have been registered in the service provider. Only a single database provider can be registered in a service provider. If possible, ensure that Entity Framework is managing its service provider by removing the call to 'UseInternalServiceProvider'. Otherwise, consider conditionally registering the database provider, or maintaining one service provider per database provider.
2024-02-01 09:19:38 :: Repo.CreateAsync() :  :: Error :: Services for database providers 'Microsoft.EntityFrameworkCore.InMemory', 'Microsoft.EntityFrameworkCore.SqlServer' have been registered in the service provider. Only a single database provider can be registered in a service provider. If possible, ensure that Entity Framework is managing its service provider by removing the call to 'UseInternalServiceProvider'. Otherwise, consider conditionally registering the database provider, or maintaining one service provider per database provider.
2024-02-01 09:21:58 :: Repo.CreateAsync() :  :: Error :: Services for database providers 'Microsoft.EntityFrameworkCore.InMemory', 'Microsoft.EntityFrameworkCore.SqlServer' have been registered in the service provider. Only a single database provider can be registered in a service provider. If possible, ensure that Entity Framework is managing its service provider by removing the call to 'UseInternalServiceProvider'. Otherwise, consider conditionally registering the database provider, or maintaining one service provider per database provider.
2024-02-01 09:32:10 :: Repo.CreateAsync() :  :: Error :: Services for database providers 'Microsoft.EntityFrameworkCore.InMemory', 'Microsoft.EntityFrameworkCore.SqlServer' have been registered in the service provider. Only a single database provider can be registered in a service provider. If possible, ensure that Entity Framework is managing its service provider by removing the call to 'UseInternalServiceProvider'. Otherwise, consider conditionally registering the database provider, or maintaining one service provider per database provider.
2024-02-01 09:34:09 :: Repo.CreateAsync() :  :: Error :: Services for database providers 'Microsoft.EntityFrameworkCore.InMemory', 'Microsoft.EntityFrameworkCore.SqlServer' have been registered in the service provider. Only a single database provider can be registered in a service provider. If possible, ensure that Entity Framework is managing its service provider by removing the call to 'UseInternalServiceProvider'. Otherwise, consider conditionally registering the database provider, or maintaining one service provider per database provider.
2024-02-01 10:19:37 :: CreateAsync_Should_Add_Product_To_Context_And_SaveChanges :: Info :: Before SaveChangesAsync - ArticleNumber=Article1, Title=Product1, Description=Sample Description, Price=10,99, CategoryId=1
2024-02-01 10:19:37 :: CreateAsync_Should_Add_Product_To_Context_And_SaveChanges :: Info :: After SaveChangesAsync - ArticleNumber=Article1, Title=Product1, Description=Sample Description, Price=10,99, CategoryId=1
2024-02-01 10:20:14 :: CreateAsync_Should_Add_Product_To_Context_And_SaveChanges :: Info :: Before SaveChangesAsync - ArticleNumber=Article1, Title=Product1, Description=Sample Description, Price=10,99, CategoryId=1
2024-02-01 10:20:14 :: CreateAsync_Should_Add_Product_To_Context_And_SaveChanges :: Info :: After SaveChangesAsync - ArticleNumber=Article1, Title=Product1, Description=Sample Description, Price=10,99, CategoryId=1
2024-02-01 10:21:23 :: CreateAsync_Should_Add_Product_To_Context_And_SaveChanges :: Info :: Before SaveChangesAsync - ArticleNumber=Article1, Title=Product1, Description=Sample Description, Price=10,99, CategoryId=1
2024-02-01 10:21:23 :: CreateAsync_Should_Add_Product_To_Context_And_SaveChanges :: Info :: After SaveChangesAsync - ArticleNumber=Article1, Title=Product1, Description=Sample Description, Price=10,99, CategoryId=1
2024-02-01 10:21:50 :: CreateAsync_Should_Add_Product_To_Context_And_SaveChanges :: Info :: Before SaveChangesAsync - ArticleNumber=Article1, Title=Product1, Description=Sample Description, Price=10,99, CategoryId=1
2024-02-01 10:21:50 :: CreateAsync_Should_Add_Product_To_Context_And_SaveChanges :: Info :: After SaveChangesAsync - ArticleNumber=Article1, Title=Product1, Description=Sample Description, Price=10,99, CategoryId=1
2024-02-01 10:23:37 :: CreateAsync_Should_Add_Product_To_Context_And_SaveChanges :: Info :: Before SaveChangesAsync - ArticleNumber=Article1, Title=Product1, Description=Sample Description, Price=10,99, CategoryId=1
2024-02-01 10:23:37 :: CreateAsync_Should_Add_Product_To_Context_And_SaveChanges :: Info :: After SaveChangesAsync - ArticleNumber=Article1, Title=Product1, Description=Sample Description, Price=10,99, CategoryId=1
2024-02-01 10:24:39 :: CreateAsync_Should_Add_Product_To_Context_And_SaveChanges :: Info :: Before SaveChangesAsync - ArticleNumber=Article1, Title=Product1, Description=Sample Description, Price=10,99, CategoryId=1
2024-02-01 10:24:39 :: CreateAsync_Should_Add_Product_To_Context_And_SaveChanges :: Info :: After SaveChangesAsync - ArticleNumber=Article1, Title=Product1, Description=Sample Description, Price=10,99, CategoryId=1
2024-02-01 10:26:21 :: CreateAsync_Should_Add_Product_To_Context_And_SaveChanges :: Info :: Before SaveChangesAsync - ArticleNumber=Article1, Title=Product1, Description=Sample Description, Price=10,99, CategoryId=1
2024-02-01 10:26:21 :: CreateAsync_Should_Add_Product_To_Context_And_SaveChanges :: Info :: After SaveChangesAsync - ArticleNumber=Article1, Title=Product1, Description=Sample Description, Price=10,99, CategoryId=1
2024-02-01 10:31:31 :: CreateAsync_Should_Add_Product_To_Context_And_SaveChanges :: Info :: Before SaveChangesAsync - ArticleNumber=Article1, Title=Product1, Description=Sample Description, Price=10,99, CategoryId=1
2024-02-01 10:31:31 :: CreateAsync_Should_Add_Product_To_Context_And_SaveChanges :: Info :: After SaveChangesAsync - ArticleNumber=Article1, Title=Product1, Description=Sample Description, Price=10,99, CategoryId=1
2024-02-01 10:41:48 :: AuthService.SignUpAsync() :: Info :: A user was created successfully.
2024-02-01 10:41:48 :: CreateAsync_Should_Add_Product_To_Context_And_SaveChanges :: Info :: Before SaveChangesAsync - ArticleNumber=Article1, Title=Product1, Description=Sample Description, Price=10,99, CategoryId=1
2024-02-01 10:41:48 :: CreateAsync_Should_Add_Product_To_Context_And_SaveChanges :: Info :: After SaveChangesAsync - ArticleNumber=Article1, Title=Product1, Description=Sample Description, Price=10,99, CategoryId=1
2024-02-01 10:44:44 :: CreateAsync_Should_Add_Product_To_Context_And_SaveChanges :: Info :: Before SaveChangesAsync - ArticleNumber=Article1, Title=Product1, Description=Sample Description, Price=10,99, CategoryId=1
2024-02-01 10:44:44 :: CreateAsync_Should_Add_Product_To_Context_And_SaveChanges :: Info :: After SaveChangesAsync - ArticleNumber=Article1, Title=Product1, Description=Sample Description, Price=10,99, CategoryId=1
2024-02-01 10:44:44 :: AuthService.SignUpAsync() :: Info :: A user was created successfully.
2024-02-01 10:44:44 :: OrderFactory.CreateOrderEntity :: Info :: OrderEntity created successfully.
2024-02-01 10:44:44 :: OrderService.CreateOrderAsync() :: Info :: _orderRepository is Mock<IOrderRepository:4>.Object
2024-02-01 10:44:44 :: OrderService.CreateOrderAsync() :: Info :: An order was placed successfully.
2024-02-01 10:47:11 :: CreateAsync_Should_Add_Product_To_Context_And_SaveChanges :: Info :: Before SaveChangesAsync - ArticleNumber=Article1, Title=Product1, Description=Sample Description, Price=10,99, CategoryId=1
2024-02-01 10:47:11 :: ProductFactory.Create :: Info :: ProductEntity created successfully.
2024-02-01 10:47:11 :: AuthService.SignUpAsync() :: Info :: A user was created successfully.
2024-02-01 10:47:11 :: ProductService.AddProductAsync() :: Info :: CategoryId of the product entity: 1
2024-02-01 10:47:11 :: ProductService.CreateProductAsync() :: Info :: _productRepository is Mock<IProductRepository:2>.Object
2024-02-01 10:47:11 :: ProductService.CreateProductAsync() :: Info :: A product was created successfully.
2024-02-01 10:47:11 :: OrderFactory.CreateOrderEntity :: Info :: OrderEntity created successfully.
2024-02-01 10:47:11 :: OrderService.CreateOrderAsync() :: Info :: _orderRepository is Mock<IOrderRepository:4>.Object
2024-02-01 10:47:11 :: OrderService.CreateOrderAsync() :: Info :: An order was placed successfully.
2024-02-01 10:47:12 :: CreateAsync_Should_Add_Product_To_Context_And_SaveChanges :: Info :: After SaveChangesAsync - ArticleNumber=Article1, Title=Product1, Description=Sample Description, Price=10,99, CategoryId=1
2024-02-01 11:37:40 :: GetOneOrderViewModel.GetOrderAsync() :: Info :: Order with ID 2 was retrieved successfully.
2024-02-01 11:37:46 :: GetOneOrderViewModel.GetOrderAsync() :: Info :: Order with ID 1 was retrieved successfully.
2024-02-01 12:11:04 :: GetOneProductViewModel.GetProductAsync() :: Info :: Product with article number 1 was retrieved successfully.
2024-02-01 12:11:27 :: AuthService.GetUserByEmailAsync() :: Info :: User with email zelda@domain.com was retrieved successfully.
2024-02-01 12:11:27 :: GetOneUserViewModel.GetUserAsync() :: Info :: User with email zelda@domain.com was retrieved successfully.
2024-02-02 13:59:58 :: AuthService.GetUserByEmailAsync() :: Info :: User with email zelda@domain.com was retrieved successfully.
2024-02-02 13:59:58 :: GetOneUserViewModel.GetUserAsync() :: Info :: User with email zelda@domain.com was retrieved successfully.
2024-02-02 14:00:43 :: ProductFactory.Create :: Info :: AddProductDto created successfully.
2024-02-02 14:00:43 :: AddProductViewModel.AddProduct() :: Info :: AddProductDto Information: ArticleNumber=1, Title=, Description=, Price=0, CategoryName=
2024-02-02 14:00:43 :: AddProductViewModel.AddProduct() :: Info :: Before calling AddProductAsync
2024-02-02 14:00:43 :: ProductService.AddProductAsync() :: Info :: Product with ArticleNumber 1 already exists.
2024-02-02 14:00:43 :: AddProductViewModel.AddProduct() :: Info :: After calling AddProductAsync, result: False
2024-02-02 14:00:43 :: AddProductViewModel.AddProduct() :: Info :: Product was not created successfully.
2024-02-02 14:03:14 :: ProductFactory.Create :: Info :: AddProductDto created successfully.
2024-02-02 14:03:14 :: AddProductViewModel.AddProduct() :: Info :: AddProductDto Information: ArticleNumber=1, Title=jh, Description=jh, Price=10, CategoryName=jlk
2024-02-02 14:03:14 :: AddProductViewModel.AddProduct() :: Info :: Before calling AddProductAsync
2024-02-02 14:03:15 :: ProductService.AddProductAsync() :: Info :: Product with ArticleNumber 1 already exists.
2024-02-02 14:03:15 :: AddProductViewModel.AddProduct() :: Info :: After calling AddProductAsync, result: False
2024-02-02 14:03:15 :: AddProductViewModel.AddProduct() :: Info :: Product was not created successfully.
2024-02-02 14:09:18 :: ProductFactory.Create :: Info :: AddProductDto created successfully.
2024-02-02 14:09:18 :: AddProductViewModel.AddProduct() :: Info :: AddProductDto Information: ArticleNumber=1, Title=d, Description=hk, Price=870, CategoryName=hkj
2024-02-02 14:09:18 :: AddProductViewModel.AddProduct() :: Info :: Before calling AddProductAsync
2024-02-02 14:09:19 :: ProductService.AddProductAsync() :: Info :: Product with ArticleNumber 1 already exists.
2024-02-02 14:09:19 :: AddProductViewModel.AddProduct() :: Info :: Product with ArticleNumber 1 already exists.
2024-02-02 14:10:48 :: ProductFactory.Create :: Info :: AddProductDto created successfully.
2024-02-02 14:10:48 :: AddProductViewModel.AddProduct() :: Info :: AddProductDto Information: ArticleNumber=5, Title=Melon, Description=Stora, Price=20, CategoryName=Frukt
2024-02-02 14:10:48 :: AddProductViewModel.AddProduct() :: Info :: Before calling AddProductAsync
2024-02-02 14:10:48 :: ProductFactory.Create :: Info :: ProductEntity created successfully.
2024-02-02 14:10:48 :: ProductService.AddProductAsync() :: Info :: CategoryId of the product entity: 3
2024-02-02 14:10:48 :: ProductService.CreateProductAsync() :: Info :: _productRepository is Infrastructure.Repositories.ProductRepository
2024-02-02 14:10:48 :: _productRepository :: Info :: Before SaveChangesAsync - ArticleNumber=5, Title=Melon, Description=Stora, Price=20, CategoryId=3
2024-02-02 14:10:48 :: _productRepository :: Info :: After SaveChangesAsync - ArticleNumber=5, Title=Melon, Description=Stora, Price=20, CategoryId=3
2024-02-02 14:10:48 :: ProductService.CreateProductAsync() :: Info :: A product was created successfully.
2024-02-02 14:10:48 :: AddProductViewModel.AddProduct() :: Info :: After calling AddProductAsync, result: True
2024-02-02 14:10:48 :: AddProductViewModel.AddProduct() :: Info :: Product was created successfully.
2024-02-02 14:12:52 :: AuthService.SignUpAsync() :: Info :: User with zelda@domain.com already exists.
2024-02-02 14:12:52 :: SignUpViewModel.SignUp() :: Info :: User was not created successfully.
2024-02-02 14:16:38 :: SignUpViewModel.SignUp() :: Info :: Before calling SignUpAsync
2024-02-02 14:16:39 :: AuthService.SignUpAsync() :: Info :: User with zelda@domain.com already exists.
2024-02-02 14:16:39 :: SignUpViewModel.SignUp() :: Info :: User with email zelda@domain.com already exists.
2024-02-02 14:17:13 :: SignUpViewModel.SignUp() :: Info :: Before calling SignUpAsync
2024-02-02 14:17:13 :: AuthService.SignUpAsync() :: Info :: User with alessandro@domain.com already exists.
2024-02-02 14:17:13 :: SignUpViewModel.SignUp() :: Info :: User with email alessandro@domain.com already exists.
2024-02-02 14:17:52 :: SignUpViewModel.SignUp() :: Info :: Before calling SignUpAsync
2024-02-02 14:17:52 :: AuthService.SignUpAsync() :: Info :: A user was created successfully.
2024-02-02 14:17:52 :: SignUpViewModel.SignUp() :: Info :: After calling SignUpAsync, result: True
2024-02-02 14:17:52 :: SignUpViewModel.SignUp() :: Info :: User was created successfully.
2024-02-02 14:18:11 :: AuthService.RemoveUserAsync() :: Info :: User with email asf@domain was successfully removed.
2024-02-02 14:18:11 :: DeleteUserViewModel.DeleteUserAsync() :: Info :: User with email asf@domain was successfully removed.
2024-02-02 14:20:31 :: CreateAsync_Should_Add_Product_To_Context_And_SaveChanges :: Info :: Before SaveChangesAsync - ArticleNumber=Article1, Title=Product1, Description=Sample Description, Price=10,99, CategoryId=1
2024-02-02 14:20:31 :: ProductFactory.Create :: Info :: ProductEntity created successfully.
2024-02-02 14:20:31 :: ProductService.AddProductAsync() :: Info :: CategoryId of the product entity: 1
2024-02-02 14:20:31 :: OrderFactory.CreateOrderEntity :: Info :: OrderEntity created successfully.
2024-02-02 14:20:31 :: ProductService.CreateProductAsync() :: Info :: _productRepository is Mock<IProductRepository:2>.Object
2024-02-02 14:20:31 :: ProductService.CreateProductAsync() :: Info :: A product was created successfully.
2024-02-02 14:20:31 :: OrderService.CreateOrderAsync() :: Info :: An order was placed successfully.
2024-02-02 14:20:31 :: CreateAsync_Should_Add_Product_To_Context_And_SaveChanges :: Info :: After SaveChangesAsync - ArticleNumber=Article1, Title=Product1, Description=Sample Description, Price=10,99, CategoryId=1
2024-02-02 14:20:31 :: AuthService.SignUpAsync() :: Info :: A user was created successfully.
2024-02-07 10:44:50 :: GetOneProductViewModel.GetProductAsync() :: Info :: Product with article number 2 was retrieved successfully.
2024-02-07 10:46:24 :: AuthService.RemoveUserAsync() :: Info :: User with email tommy@domain.com was successfully removed.
2024-02-07 10:46:24 :: DeleteUserViewModel.DeleteUserAsync() :: Info :: User with email tommy@domain.com was successfully removed.
2024-02-07 10:46:35 :: AuthService.RemoveUserAsync() :: Info :: User with email joakim@domain.com was successfully removed.
2024-02-07 10:46:35 :: DeleteUserViewModel.DeleteUserAsync() :: Info :: User with email joakim@domain.com was successfully removed.
2024-02-07 10:47:07 :: AuthService.RemoveUserAsync() :: Info :: User with email zelda@domain was successfully removed.
2024-02-07 10:47:07 :: DeleteUserViewModel.DeleteUserAsync() :: Info :: User with email zelda@domain was successfully removed.
2024-02-07 10:47:39 :: CreateAsync_Should_Add_Product_To_Context_And_SaveChanges :: Info :: Before SaveChangesAsync - ArticleNumber=Article1, Title=Product1, Description=Sample Description, Price=10,99, CategoryId=1
2024-02-07 10:47:39 :: ProductFactory.Create :: Info :: ProductEntity created successfully.
2024-02-07 10:47:39 :: OrderFactory.CreateOrderEntity :: Info :: OrderEntity created successfully.
2024-02-07 10:47:39 :: ProductService.AddProductAsync() :: Info :: CategoryId of the product entity: 1
2024-02-07 10:47:39 :: ProductService.CreateProductAsync() :: Info :: _productRepository is Mock<IProductRepository:2>.Object
2024-02-07 10:47:39 :: OrderService.CreateOrderAsync() :: Info :: An order was placed successfully.
2024-02-07 10:47:39 :: CreateAsync_Should_Add_Product_To_Context_And_SaveChanges :: Info :: After SaveChangesAsync - ArticleNumber=Article1, Title=Product1, Description=Sample Description, Price=10,99, CategoryId=1
2024-02-07 10:47:40 :: AuthService.SignUpAsync() :: Info :: A user was created successfully.
2024-02-08 09:46:47 :: GetOneUserViewModel.GetUserAsync() :: Warning :: Email is empty.
2024-02-08 09:55:16 :: AuthService.GetUserByIdAsync() :: Info :: User with ID 17 was retrieved successfully.
2024-02-08 09:55:16 :: UpdateUserViewModel.GetUserAsync() :: Info :: User with ID 17 was retrieved successfully.
2024-02-08 09:55:45 :: AuthService.GetUserByIdAsync() :: Info :: User with ID 17 was retrieved successfully.
2024-02-08 09:55:45 :: UpdateUserViewModel.GetUserAsync() :: Info :: User with ID 17 was retrieved successfully.
2024-02-08 09:59:58 :: AuthService.GetUserByIdAsync() :: Info :: User with ID 17 was retrieved successfully.
2024-02-08 09:59:58 :: UpdateUserViewModel.GetUserAsync() :: Info :: User with ID 17 was retrieved successfully.
2024-02-08 10:00:30 :: UpdateUserViewModel.UpdateUser() :: Info :: User ID to update: 0
2024-02-08 10:00:30 :: AuthService.UpdateUserAsync() :: Info :: User with id 0 was not found.
2024-02-08 10:00:30 :: UpdateUserViewModel.UpdateUser() :: Info :: User was not updated successfully.
2024-02-08 10:01:40 :: UpdateUserViewModel.UpdateUser() :: Info :: User ID to update: 0
2024-02-08 10:01:40 :: AuthService.UpdateUserAsync() :: Info :: User with id 0 was not found.
2024-02-08 10:01:40 :: UpdateUserViewModel.UpdateUser() :: Info :: User was not updated successfully.
2024-02-08 10:02:10 :: UpdateUserViewModel.UpdateUser() :: Info :: User ID to update: 0
2024-02-08 10:02:10 :: AuthService.UpdateUserAsync() :: Info :: User with id 0 was not found.
2024-02-08 10:02:10 :: UpdateUserViewModel.UpdateUser() :: Info :: User was not updated successfully.
2024-02-08 10:02:48 :: UpdateUserViewModel.UpdateUser() :: Info :: User ID to update: 17
2024-02-08 10:02:48 :: AuthService.UpdateUserAsync() :: Info :: User with email gfj was successfully updated.
2024-02-08 10:02:48 :: UpdateUserViewModel.UpdateUser() :: Info :: User was updated successfully.
2024-02-08 10:04:23 :: AuthService.GetUserByIdAsync() :: Info :: User with ID 17 was retrieved successfully.
2024-02-08 10:04:23 :: UpdateUserViewModel.GetUserAsync() :: Info :: User with ID 17 was retrieved successfully.
2024-02-08 10:04:41 :: UpdateUserViewModel.UpdateUser() :: Info :: User ID to update: 17
2024-02-08 10:04:41 :: Repo.UpdateAsync() :: Error :: An error occurred while saving the entity changes. See the inner exception for details.
2024-02-08 10:04:41 :: AuthService.UpdateUserAsync() :: Error :: Failed to update user with email cx.
2024-02-08 10:04:41 :: UpdateUserViewModel.UpdateUser() :: Info :: User was not updated successfully.
2024-02-08 10:05:15 :: UpdateUserViewModel.UpdateUser() :: Info :: User ID to update: 0
2024-02-08 10:05:15 :: AuthService.UpdateUserAsync() :: Info :: User with id 0 was not found.
2024-02-08 10:05:15 :: UpdateUserViewModel.UpdateUser() :: Info :: User was not updated successfully.
2024-02-08 10:05:33 :: AuthService.GetUserByIdAsync() :: Info :: User with ID 17 was retrieved successfully.
2024-02-08 10:05:33 :: UpdateUserViewModel.GetUserAsync() :: Info :: User with ID 17 was retrieved successfully.
2024-02-08 10:05:51 :: UpdateUserViewModel.UpdateUser() :: Info :: User ID to update: 17
2024-02-08 10:05:51 :: AuthService.UpdateUserAsync() :: Info :: User with email cxb was successfully updated.
2024-02-08 10:05:51 :: UpdateUserViewModel.UpdateUser() :: Info :: User was updated successfully.
2024-02-08 10:12:52 :: AuthService.GetUserByIdAsync() :: Info :: User with ID 17 was retrieved successfully.
2024-02-08 10:12:52 :: UpdateUserViewModel.GetUserAsync() :: Info :: User with ID 17 was retrieved successfully.
2024-02-08 10:13:29 :: UpdateUserViewModel.GetUserAsync() :: Warning :: User ID is invalid.
2024-02-08 10:13:39 :: AuthService.GetUserByIdAsync() :: Info :: User with ID 17 was retrieved successfully.
2024-02-08 10:13:39 :: UpdateUserViewModel.GetUserAsync() :: Info :: User with ID 17 was retrieved successfully.
2024-02-08 10:15:03 :: AuthService.GetUserByIdAsync() :: Info :: User with ID 17 was retrieved successfully.
2024-02-08 10:15:03 :: UpdateUserViewModel.GetUserAsync() :: Info :: User with ID 17 was retrieved successfully.
2024-02-08 10:15:47 :: AuthService.GetUserByIdAsync() :: Info :: User with ID 17 was retrieved successfully.
2024-02-08 10:15:47 :: UpdateUserViewModel.GetUserAsync() :: Info :: User with ID 17 was retrieved successfully.
2024-02-08 10:19:16 :: AuthService.GetUserByIdAsync() :: Info :: User with ID 17 was retrieved successfully.
2024-02-08 10:19:16 :: UpdateUserViewModel.GetUserAsync() :: Info :: User with ID 17 was retrieved successfully.
2024-02-08 10:19:33 :: UpdateUserViewModel.UpdateUser() :: Info :: User ID to update: 17
2024-02-08 10:19:34 :: Repo.UpdateAsync() :: Error :: An error occurred while saving the entity changes. See the inner exception for details.
2024-02-08 10:19:34 :: AuthService.UpdateUserAsync() :: Error :: Failed to update user with email g.
2024-02-08 10:19:34 :: UpdateUserViewModel.UpdateUser() :: Info :: User was not updated successfully.
2024-02-08 10:19:58 :: UpdateUserViewModel.UpdateUser() :: Info :: User ID to update: 17
2024-02-08 10:19:58 :: Repo.UpdateAsync() :: Error :: An error occurred while saving the entity changes. See the inner exception for details.
2024-02-08 10:19:58 :: AuthService.UpdateUserAsync() :: Error :: Failed to update user with email dsg.
2024-02-08 10:19:58 :: UpdateUserViewModel.UpdateUser() :: Info :: User was not updated successfully.
2024-02-08 10:20:15 :: UpdateUserViewModel.UpdateUser() :: Info :: User ID to update: 17
2024-02-08 10:20:15 :: AuthService.UpdateUserAsync() :: Info :: User with email fhd was successfully updated.
2024-02-08 10:20:15 :: UpdateUserViewModel.UpdateUser() :: Info :: User was updated successfully.
2024-02-08 10:27:44 :: AuthService.GetUserByIdAsync() :: Info :: User with ID 17 was retrieved successfully.
2024-02-08 10:27:44 :: UpdateUserViewModel.GetUserAsync() :: Info :: User with ID 17 was retrieved successfully.
2024-02-08 10:27:56 :: AuthService.GetUserByIdAsync() :: Info :: User with ID 17 was retrieved successfully.
2024-02-08 10:27:56 :: UpdateUserViewModel.GetUserAsync() :: Info :: User with ID 17 was retrieved successfully.
2024-02-08 10:28:23 :: AuthService.GetUserByIdAsync() :: Info :: User with ID 17 was retrieved successfully.
2024-02-08 10:28:23 :: UpdateUserViewModel.GetUserAsync() :: Info :: User with ID 17 was retrieved successfully.
2024-02-08 10:29:24 :: AuthService.GetUserByIdAsync() :: Info :: User with ID 17 was retrieved successfully.
2024-02-08 10:29:24 :: UpdateUserViewModel.GetUserAsync() :: Info :: User with ID 17 was retrieved successfully.
2024-02-08 10:31:59 :: AuthService.GetUserByIdAsync() :: Info :: User with ID 17 was retrieved successfully.
2024-02-08 10:31:59 :: UpdateUserViewModel.GetUserAsync() :: Info :: User with ID 17 was retrieved successfully.
2024-02-08 10:32:11 :: UpdateUserViewModel.UpdateUser() :: Info :: User ID to update: 17
2024-02-08 10:32:11 :: AuthService.UpdateUserAsync() :: Info :: User with email dsg was successfully updated.
2024-02-08 10:32:11 :: UpdateUserViewModel.UpdateUser() :: Info :: User was updated successfully.
2024-02-08 10:33:35 :: AuthService.GetUserByIdAsync() :: Info :: User with ID 17 was retrieved successfully.
2024-02-08 10:33:35 :: UpdateUserViewModel.GetUserAsync() :: Info :: User with ID 17 was retrieved successfully.
2024-02-08 10:34:57 :: AuthService.GetUserByIdAsync() :: Info :: User with ID 17 was retrieved successfully.
2024-02-08 10:34:57 :: UpdateUserViewModel.GetUserAsync() :: Info :: User with ID 17 was retrieved successfully.
2024-02-08 10:35:01 :: AuthService.GetUserByIdAsync() :: Info :: User with ID 17 was retrieved successfully.
2024-02-08 10:35:01 :: UpdateUserViewModel.GetUserAsync() :: Info :: User with ID 17 was retrieved successfully.
2024-02-08 10:41:03 :: UpdateUserViewModel.UpdateUser() :: Info :: User ID to update: 17
2024-02-08 10:41:03 :: Repo.UpdateAsync() :: Error :: An error occurred while saving the entity changes. See the inner exception for details.
2024-02-08 10:41:03 :: AuthService.UpdateUserAsync() :: Error :: Failed to update user with email dfhb.
2024-02-08 10:41:03 :: UpdateUserViewModel.UpdateUser() :: Info :: User was not updated successfully.
2024-02-08 10:44:25 :: UpdateUserViewModel.UpdateUser() :: Info :: User ID to update: 17
2024-02-08 10:44:25 :: Repo.UpdateAsync() :: Error :: An error occurred while saving the entity changes. See the inner exception for details.
2024-02-08 10:44:25 :: AuthService.UpdateUserAsync() :: Error :: Failed to update user with email dg.
2024-02-08 10:44:25 :: UpdateUserViewModel.UpdateUser() :: Info :: User was not updated successfully.
2024-02-08 10:46:36 :: UpdateUserViewModel.UpdateUser() :: Info :: User ID to update: 17
2024-02-08 10:46:36 :: Repo.UpdateAsync() :: Error :: An error occurred while saving the entity changes. See the inner exception for details.
2024-02-08 10:46:36 :: AuthService.UpdateUserAsync() :: Error :: Failed to update user with email dcb.
2024-02-08 10:46:36 :: UpdateUserViewModel.UpdateUser() :: Info :: User was not updated successfully.
2024-02-08 10:47:33 :: AuthService.GetUserByIdAsync() :: Info :: User with ID 17 was retrieved successfully.
2024-02-08 10:47:33 :: UpdateUserViewModel.GetUserAsync() :: Info :: User with ID 17 was retrieved successfully.
2024-02-08 10:48:16 :: AuthService.GetUserByIdAsync() :: Info :: User with ID 17 was retrieved successfully.
2024-02-08 10:48:16 :: UpdateUserViewModel.GetUserAsync() :: Info :: User with ID 17 was retrieved successfully.
2024-02-08 10:48:20 :: AuthService.GetUserByIdAsync() :: Info :: User with ID 17 was retrieved successfully.
2024-02-08 10:48:20 :: UpdateUserViewModel.GetUserAsync() :: Info :: User with ID 17 was retrieved successfully.
2024-02-08 10:48:52 :: AuthService.GetUserByIdAsync() :: Info :: User with ID 17 was retrieved successfully.
2024-02-08 10:48:52 :: UpdateUserViewModel.GetUserAsync() :: Info :: User with ID 17 was retrieved successfully.
2024-02-08 10:48:59 :: AuthService.GetUserByIdAsync() :: Info :: User with ID 17 was retrieved successfully.
2024-02-08 10:48:59 :: UpdateUserViewModel.GetUserAsync() :: Info :: User with ID 17 was retrieved successfully.
2024-02-08 10:49:05 :: AuthService.GetUserByIdAsync() :: Info :: User with ID 17 was retrieved successfully.
2024-02-08 10:49:05 :: UpdateUserViewModel.GetUserAsync() :: Info :: User with ID 17 was retrieved successfully.
2024-02-08 10:49:16 :: UpdateUserViewModel.UpdateUser() :: Info :: User ID to update: 17
2024-02-08 10:49:16 :: Repo.UpdateAsync() :: Error :: An error occurred while saving the entity changes. See the inner exception for details.
2024-02-08 10:49:16 :: AuthService.UpdateUserAsync() :: Error :: Failed to update user with email fdh.
2024-02-08 10:49:16 :: UpdateUserViewModel.UpdateUser() :: Info :: User was not updated successfully.
2024-02-08 10:49:31 :: AuthService.GetUserByIdAsync() :: Info :: User with ID 17 was retrieved successfully.
2024-02-08 10:49:31 :: UpdateUserViewModel.GetUserAsync() :: Info :: User with ID 17 was retrieved successfully.
2024-02-08 10:49:40 :: UpdateUserViewModel.UpdateUser() :: Info :: User ID to update: 17
2024-02-08 10:49:40 :: AuthService.UpdateUserAsync() :: Info :: User with email cxb was successfully updated.
2024-02-08 10:49:40 :: UpdateUserViewModel.UpdateUser() :: Info :: User was updated successfully.
2024-02-08 10:49:50 :: AuthService.GetUserByIdAsync() :: Info :: User with ID 17 was retrieved successfully.
2024-02-08 10:49:50 :: UpdateUserViewModel.GetUserAsync() :: Info :: User with ID 17 was retrieved successfully.
2024-02-08 10:51:54 :: UpdateUserViewModel.UpdateUser() :: Info :: User ID to update: 17
2024-02-08 10:51:54 :: AuthService.UpdateUserAsync() :: Info :: User with email dsg was successfully updated.
2024-02-08 10:51:54 :: UpdateUserViewModel.UpdateUser() :: Info :: User was updated successfully.
2024-02-08 11:00:38 :: AuthService.GetUserByIdAsync() :: Info :: User with ID 17 was retrieved successfully.
2024-02-08 11:00:38 :: UpdateUserViewModel.GetUserAsync() :: Info :: User with ID 17 was retrieved successfully.
2024-02-08 11:13:17 :: AuthService.GetUserByIdAsync() :: Info :: User with ID 17 was retrieved successfully.
2024-02-08 11:13:17 :: UpdateUserViewModel.GetUserAsync() :: Info :: User with ID 17 was retrieved successfully.
2024-02-08 11:17:44 :: AuthService.GetUserByIdAsync() :: Info :: User with ID 17 was retrieved successfully.
2024-02-08 11:17:44 :: UpdateUserViewModel.GetUserAsync() :: Info :: User with ID 17 was retrieved successfully.
2024-02-08 11:22:28 :: AuthService.GetUserByIdAsync() :: Info :: User with ID 17 was retrieved successfully.
2024-02-08 11:22:28 :: UpdateUserViewModel.GetUserAsync() :: Info :: User with ID 17 was retrieved successfully.
2024-02-08 11:26:34 :: AuthService.GetUserByIdAsync() :: Info :: User with ID 4 was not found.
2024-02-08 11:26:34 :: UpdateUserViewModel.GetUserAsync() :: Info :: User with ID 4 was not found.
2024-02-08 11:26:40 :: AuthService.GetUserByIdAsync() :: Info :: User with ID 17 was retrieved successfully.
2024-02-08 11:26:40 :: UpdateUserViewModel.GetUserAsync() :: Info :: User with ID 17 was retrieved successfully.
2024-02-08 11:27:30 :: AuthService.GetUserByIdAsync() :: Info :: User with ID 17 was retrieved successfully.
2024-02-08 11:27:30 :: UpdateUserViewModel.GetUserAsync() :: Info :: User with ID 17 was retrieved successfully.
2024-02-08 11:31:00 :: AuthService.GetUserByIdAsync() :: Info :: User with ID 17 was retrieved successfully.
2024-02-08 11:31:00 :: UpdateUserViewModel.GetUserAsync() :: Info :: User with ID 17 was retrieved successfully.
2024-02-08 11:31:41 :: AuthService.GetUserByIdAsync() :: Info :: User with ID 17 was retrieved successfully.
2024-02-08 11:31:41 :: UpdateUserViewModel.GetUserAsync() :: Info :: User with ID 17 was retrieved successfully.
2024-02-08 11:35:06 :: UpdateUserViewModel.UpdateUser() :: Info :: User ID to update: 0
2024-02-08 11:35:07 :: AuthService.UpdateUserAsync() :: Info :: User with id 0 was not found.
2024-02-08 11:35:07 :: UpdateUserViewModel.UpdateUser() :: Info :: User was not updated successfully.
2024-02-08 11:35:11 :: AuthService.GetUserByIdAsync() :: Info :: User with ID 17 was retrieved successfully.
2024-02-08 11:35:11 :: UpdateUserViewModel.GetUserAsync() :: Info :: User with ID 17 was retrieved successfully.
2024-02-08 11:36:48 :: AuthService.GetUserByIdAsync() :: Info :: User with ID 17 was retrieved successfully.
2024-02-08 11:36:48 :: UpdateUserViewModel.GetUserAsync() :: Info :: User with ID 17 was retrieved successfully.
2024-02-08 11:39:42 :: AuthService.GetUserByIdAsync() :: Info :: User with ID 17 was retrieved successfully.
2024-02-08 11:39:42 :: UpdateUserViewModel.GetUserAsync() :: Info :: User with ID 17 was retrieved successfully.
2024-02-08 11:40:42 :: UpdateUserViewModel.UpdateUser() :: Info :: User ID to update: 0
2024-02-08 11:40:43 :: AuthService.UpdateUserAsync() :: Info :: User with id 0 was not found.
2024-02-08 11:40:43 :: UpdateUserViewModel.UpdateUser() :: Info :: User was not updated successfully.
2024-02-08 11:40:49 :: AuthService.GetUserByIdAsync() :: Info :: User with ID 17 was retrieved successfully.
2024-02-08 11:40:49 :: UpdateUserViewModel.GetUserAsync() :: Info :: User with ID 17 was retrieved successfully.
2024-02-08 11:41:06 :: UpdateUserViewModel.UpdateUser() :: Info :: User ID to update: 17
2024-02-08 11:41:07 :: Repo.UpdateAsync() :: Error :: An error occurred while saving the entity changes. See the inner exception for details.
2024-02-08 11:41:07 :: AuthService.UpdateUserAsync() :: Error :: Failed to update user with email .
2024-02-08 11:41:07 :: UpdateUserViewModel.UpdateUser() :: Info :: User was not updated successfully.
2024-02-08 11:44:57 :: AuthService.GetUserByIdAsync() :: Info :: User with ID 17 was retrieved successfully.
2024-02-08 11:44:57 :: UpdateUserViewModel.GetUserAsync() :: Info :: User with ID 17 was retrieved successfully.
2024-02-08 11:50:58 :: AuthService.GetUserByIdAsync() :: Info :: User with ID 17 was retrieved successfully.
2024-02-08 11:50:58 :: UpdateUserViewModel.GetUserAsync() :: Info :: User with ID 17 was retrieved successfully.
2024-02-08 11:51:15 :: UpdateUserViewModel.UpdateUser() :: Info :: User ID to update: 17
2024-02-08 11:51:15 :: AuthService.UpdateUserAsync() :: Info :: User with email gfhndsg was successfully updated.
2024-02-08 11:51:15 :: UpdateUserViewModel.UpdateUser() :: Info :: User was updated successfully.
2024-02-08 11:57:00 :: AuthService.GetUserByIdAsync() :: Info :: User with ID 17 was retrieved successfully.
2024-02-08 11:57:00 :: UpdateUserViewModel.GetUserAsync() :: Info :: User with ID 17 was retrieved successfully.
2024-02-08 11:57:19 :: UpdateUserViewModel.UpdateUser() :: Info :: User ID to update: 0
2024-02-08 11:57:19 :: AuthService.UpdateUserAsync() :: Info :: User with id 0 was not found.
2024-02-08 11:57:19 :: UpdateUserViewModel.UpdateUser() :: Info :: User was not updated successfully.
2024-02-08 12:00:04 :: AuthService.GetUserByIdAsync() :: Info :: User with ID 17 was retrieved successfully.
2024-02-08 12:00:04 :: UpdateUserViewModel.GetUserAsync() :: Info :: User with ID 17 was retrieved successfully.
2024-02-08 12:00:09 :: UpdateUserViewModel.UpdateUser() :: Info :: User ID to update: 0
2024-02-08 12:00:09 :: AuthService.UpdateUserAsync() :: Info :: User with id 0 was not found.
2024-02-08 12:00:09 :: UpdateUserViewModel.UpdateUser() :: Info :: User was not updated successfully.
2024-02-08 12:02:06 :: AuthService.GetUserByIdAsync() :: Info :: User with ID 17 was retrieved successfully.
2024-02-08 12:02:06 :: UpdateUserViewModel.GetUserAsync() :: Info :: User with ID 17 was retrieved successfully.
2024-02-08 12:02:10 :: UpdateUserViewModel.UpdateUser() :: Info :: User ID to update: 0
2024-02-08 12:02:10 :: AuthService.UpdateUserAsync() :: Info :: User with id 0 was not found.
2024-02-08 12:02:10 :: UpdateUserViewModel.UpdateUser() :: Info :: User was not updated successfully.
2024-02-08 12:03:04 :: AuthService.GetUserByIdAsync() :: Info :: User with ID 17 was retrieved successfully.
2024-02-08 12:03:04 :: UpdateUserViewModel.GetUserAsync() :: Info :: User with ID 17 was retrieved successfully.
2024-02-08 12:03:12 :: UpdateUserViewModel.UpdateUser() :: Info :: User ID to update: 17
2024-02-08 12:03:12 :: AuthService.UpdateUserAsync() :: Info :: User with email gfhndsg was successfully updated.
2024-02-08 12:03:12 :: UpdateUserViewModel.UpdateUser() :: Info :: User was updated successfully.
2024-02-08 12:05:10 :: AuthService.GetUserByIdAsync() :: Info :: User with ID 17 was retrieved successfully.
2024-02-08 12:05:10 :: UpdateUserViewModel.GetUserAsync() :: Info :: User with ID 17 was retrieved successfully.
2024-02-08 12:05:14 :: UpdateUserViewModel.UpdateUser() :: Info :: User ID to update: 0
2024-02-08 12:05:14 :: AuthService.UpdateUserAsync() :: Info :: User with id 0 was not found.
2024-02-08 12:05:14 :: UpdateUserViewModel.UpdateUser() :: Info :: User was not updated successfully.
2024-02-08 12:08:08 :: AuthService.GetUserByIdAsync() :: Info :: User with ID 17 was retrieved successfully.
2024-02-08 12:08:08 :: UpdateUserViewModel.GetUserAsync() :: Info :: User with ID 17 was retrieved successfully.
2024-02-08 12:08:14 :: UpdateUserViewModel.UpdateUser() :: Info :: User ID to update: 17
2024-02-08 12:08:14 :: AuthService.UpdateUserAsync() :: Info :: User with email gfhndsg was successfully updated.
2024-02-08 12:08:14 :: UpdateUserViewModel.UpdateUser() :: Info :: User was updated successfully.
2024-02-08 12:08:29 :: AuthService.GetUserByIdAsync() :: Info :: User with ID 17 was retrieved successfully.
2024-02-08 12:08:29 :: UpdateUserViewModel.GetUserAsync() :: Info :: User with ID 17 was retrieved successfully.
2024-02-08 12:09:03 :: UpdateUserViewModel.UpdateUser() :: Info :: User ID to update: 0
2024-02-08 12:09:03 :: AuthService.UpdateUserAsync() :: Info :: User with id 0 was not found.
2024-02-08 12:09:03 :: UpdateUserViewModel.UpdateUser() :: Info :: User was not updated successfully.
2024-02-08 12:09:20 :: AuthService.GetUserByIdAsync() :: Info :: User with ID 17 was retrieved successfully.
2024-02-08 12:09:20 :: UpdateUserViewModel.GetUserAsync() :: Info :: User with ID 17 was retrieved successfully.
2024-02-08 12:09:45 :: UpdateUserViewModel.UpdateUser() :: Info :: User ID to update: 17
2024-02-08 12:09:45 :: AuthService.UpdateUserAsync() :: Info :: User with email magnus@domain.com was successfully updated.
2024-02-08 12:09:45 :: UpdateUserViewModel.UpdateUser() :: Info :: User was updated successfully.
2024-02-08 12:12:22 :: AuthService.GetUserByIdAsync() :: Info :: User with ID 17 was retrieved successfully.
2024-02-08 12:12:22 :: UpdateUserViewModel.GetUserAsync() :: Info :: User with ID 17 was retrieved successfully.
2024-02-08 12:12:39 :: UpdateUserViewModel.UpdateUser() :: Info :: User ID to update: 17
2024-02-08 12:12:39 :: AuthService.UpdateUserAsync() :: Info :: User with email magnus@domain.com was successfully updated.
2024-02-08 12:12:39 :: UpdateUserViewModel.UpdateUser() :: Info :: User was updated successfully.
2024-02-08 12:13:07 :: AuthService.GetUserByEmailAsync() :: Info :: User with email magnus@domain.com was retrieved successfully.
2024-02-08 12:13:07 :: GetOneUserViewModel.GetUserAsync() :: Info :: User with email magnus@domain.com was retrieved successfully.
2024-02-08 12:25:54 :: AuthService.GetUserByIdAsync() :: Info :: User with ID 17 was retrieved successfully.
2024-02-08 12:25:54 :: UpdateUserViewModel.GetUserAsync() :: Info :: User with ID 17 was retrieved successfully.
2024-02-08 12:26:07 :: UpdateUserViewModel.UpdateUser() :: Info :: User ID to update: 17
2024-02-08 12:26:08 :: AuthService.UpdateUserAsync() :: Info :: User with email magnus@domain.com was successfully updated.
2024-02-08 12:26:08 :: UpdateUserViewModel.UpdateUser() :: Info :: User was updated successfully.
